(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@ngrx/data/src/selectors/entity-selectors", ["require", "exports", "tslib", "@angular/core", "@ngrx/store", "@ngrx/data/src/selectors/entity-cache-selector", "@ngrx/data/src/reducers/constants", "@ngrx/data/src/reducers/entity-collection-creator"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const tslib_1 = require("tslib");
    const core_1 = require("@angular/core");
    const store_1 = require("@ngrx/store");
    const entity_cache_selector_1 = require("@ngrx/data/src/selectors/entity-cache-selector");
    const constants_1 = require("@ngrx/data/src/reducers/constants");
    const entity_collection_creator_1 = require("@ngrx/data/src/reducers/entity-collection-creator");
    /** Creates EntitySelector functions for entity collections. */
    let EntitySelectorsFactory = class EntitySelectorsFactory {
        constructor(entityCollectionCreator, selectEntityCache) {
            this.entityCollectionCreator =
                entityCollectionCreator || new entity_collection_creator_1.EntityCollectionCreator();
            this.selectEntityCache =
                selectEntityCache || entity_cache_selector_1.createEntityCacheSelector(constants_1.ENTITY_CACHE_NAME);
        }
        /**
         * Create the NgRx selector from the store root to the named collection,
         * e.g. from Object to Heroes.
         * @param entityName the name of the collection
         */
        createCollectionSelector(entityName) {
            const getCollection = (cache = {}) => ((cache[entityName] ||
                this.entityCollectionCreator.create(entityName)));
            return store_1.createSelector(this.selectEntityCache, getCollection);
        }
        // createCollectionSelectors implementation
        createCollectionSelectors(metadataOrName) {
            const metadata = typeof metadataOrName === 'string'
                ? { entityName: metadataOrName }
                : metadataOrName;
            const selectKeys = (c) => c.ids;
            const selectEntityMap = (c) => c.entities;
            const selectEntities = store_1.createSelector(selectKeys, selectEntityMap, (keys, entities) => keys.map(key => entities[key]));
            const selectCount = store_1.createSelector(selectKeys, keys => keys.length);
            // EntityCollection selectors that go beyond the ngrx/entity/EntityState selectors
            const selectFilter = (c) => c.filter;
            const filterFn = metadata.filterFn;
            const selectFilteredEntities = filterFn
                ? store_1.createSelector(selectEntities, selectFilter, (entities, pattern) => filterFn(entities, pattern))
                : selectEntities;
            const selectLoaded = (c) => c.loaded;
            const selectLoading = (c) => c.loading;
            const selectChangeState = (c) => c.changeState;
            // Create collection selectors for each `additionalCollectionState` property.
            // These all extend from `selectCollection`
            const extra = metadata.additionalCollectionState || {};
            const extraSelectors = {};
            Object.keys(extra).forEach(k => {
                extraSelectors['select' + k[0].toUpperCase() + k.slice(1)] = (c) => c[k];
            });
            return Object.assign({ selectCount,
                selectEntities,
                selectEntityMap,
                selectFilter,
                selectFilteredEntities,
                selectKeys,
                selectLoaded,
                selectLoading,
                selectChangeState }, extraSelectors);
        }
        // createCollectionSelectors implementation
        create(metadataOrName) {
            const metadata = typeof metadataOrName === 'string'
                ? { entityName: metadataOrName }
                : metadataOrName;
            const entityName = metadata.entityName;
            const selectCollection = this.createCollectionSelector(entityName);
            const collectionSelectors = this.createCollectionSelectors(metadata);
            const entitySelectors = {};
            Object.keys(collectionSelectors).forEach(k => {
                entitySelectors[k] = store_1.createSelector(selectCollection, collectionSelectors[k]);
            });
            return Object.assign({ entityName,
                selectCollection, selectEntityCache: this.selectEntityCache }, entitySelectors);
        }
    };
    EntitySelectorsFactory = tslib_1.__decorate([
        core_1.Injectable(),
        tslib_1.__param(0, core_1.Optional()),
        tslib_1.__param(1, core_1.Optional()),
        tslib_1.__param(1, core_1.Inject(entity_cache_selector_1.ENTITY_CACHE_SELECTOR_TOKEN)),
        tslib_1.__metadata("design:paramtypes", [entity_collection_creator_1.EntityCollectionCreator, Function])
    ], EntitySelectorsFactory);
    exports.EntitySelectorsFactory = EntitySelectorsFactory;
});
//# sourceMappingURL=data:application/json;base64,