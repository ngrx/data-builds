{"version":3,"file":"entity-cache-reducer.js","sourceRoot":"ng://@ngrx/data/","sources":["src/reducers/entity-cache-reducer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Action, ActionReducer } from '@ngrx/store';\n\nimport { EntityAction } from '../actions/entity-action';\nimport { EntityCache } from './entity-cache';\n\nimport {\n  EntityCacheAction,\n  ClearCollections,\n  LoadCollections,\n  MergeQuerySet,\n  SaveEntities,\n  SaveEntitiesCancel,\n  SaveEntitiesError,\n  SaveEntitiesSuccess,\n} from '../actions/entity-cache-action';\n\nimport {\n  ChangeSetOperation,\n  ChangeSetItem,\n} from '../actions/entity-cache-change-set';\n\nimport { EntityCollection } from './entity-collection';\nimport { EntityCollectionCreator } from './entity-collection-creator';\nimport { EntityCollectionReducerRegistry } from './entity-collection-reducer-registry';\nimport { EntityOp } from '../actions/entity-op';\nimport { Logger } from '../utils/interfaces';\nimport { MergeStrategy } from '../actions/merge-strategy';\n\n/**\n * Creates the EntityCacheReducer via its create() method\n */\n@Injectable()\nexport class EntityCacheReducerFactory {\n  constructor(\n    private entityCollectionCreator: EntityCollectionCreator,\n    private entityCollectionReducerRegistry: EntityCollectionReducerRegistry,\n    private logger: Logger\n  ) {}\n\n  /**\n   * Create the @ngrx/data entity cache reducer which either responds to entity cache level actions\n   * or (more commonly) delegates to an EntityCollectionReducer based on the action.payload.entityName.\n   */\n  create(): ActionReducer<EntityCache, Action> {\n    // This technique ensures a named function appears in the debugger\n    return entityCacheReducer.bind(this);\n\n    function entityCacheReducer(\n      this: EntityCacheReducerFactory,\n      entityCache: EntityCache = {},\n      action: { type: string; payload?: any }\n    ): EntityCache {\n      // EntityCache actions\n      switch (action.type) {\n        case EntityCacheAction.CLEAR_COLLECTIONS: {\n          return this.clearCollectionsReducer(\n            entityCache,\n            action as ClearCollections\n          );\n        }\n\n        case EntityCacheAction.LOAD_COLLECTIONS: {\n          return this.loadCollectionsReducer(\n            entityCache,\n            action as LoadCollections\n          );\n        }\n\n        case EntityCacheAction.MERGE_QUERY_SET: {\n          return this.mergeQuerySetReducer(\n            entityCache,\n            action as MergeQuerySet\n          );\n        }\n\n        case EntityCacheAction.SAVE_ENTITIES: {\n          return this.saveEntitiesReducer(entityCache, action as SaveEntities);\n        }\n\n        case EntityCacheAction.SAVE_ENTITIES_CANCEL: {\n          return this.saveEntitiesCancelReducer(\n            entityCache,\n            action as SaveEntitiesCancel\n          );\n        }\n\n        case EntityCacheAction.SAVE_ENTITIES_ERROR: {\n          return this.saveEntitiesErrorReducer(\n            entityCache,\n            action as SaveEntitiesError\n          );\n        }\n\n        case EntityCacheAction.SAVE_ENTITIES_SUCCESS: {\n          return this.saveEntitiesSuccessReducer(\n            entityCache,\n            action as SaveEntitiesSuccess\n          );\n        }\n\n        case EntityCacheAction.SET_ENTITY_CACHE: {\n          // Completely replace the EntityCache. Be careful!\n          return action.payload.cache;\n        }\n      }\n\n      // Apply entity collection reducer if this is a valid EntityAction for a collection\n      const payload = action.payload;\n      if (payload && payload.entityName && payload.entityOp && !payload.error) {\n        return this.applyCollectionReducer(entityCache, action as EntityAction);\n      }\n\n      // Not a valid EntityAction\n      return entityCache;\n    }\n  }\n\n  /**\n   * Reducer to clear multiple collections at the same time.\n   * @param entityCache the entity cache\n   * @param action a ClearCollections action whose payload is an array of collection names.\n   * If empty array, does nothing. If no array, clears all the collections.\n   */\n  protected clearCollectionsReducer(\n    entityCache: EntityCache,\n    action: ClearCollections\n  ) {\n    // tslint:disable-next-line:prefer-const\n    let { collections, tag } = action.payload;\n    const entityOp = EntityOp.REMOVE_ALL;\n\n    if (!collections) {\n      // Collections is not defined. Clear all collections.\n      collections = Object.keys(entityCache);\n    }\n\n    entityCache = collections.reduce((newCache, entityName) => {\n      const payload = { entityName, entityOp };\n      const act: EntityAction = {\n        type: `[${entityName}] ${action.type}`,\n        payload,\n      };\n      newCache = this.applyCollectionReducer(newCache, act);\n      return newCache;\n    }, entityCache);\n    return entityCache;\n  }\n\n  /**\n   * Reducer to load collection in the form of a hash of entity data for multiple collections.\n   * @param entityCache the entity cache\n   * @param action a LoadCollections action whose payload is the QuerySet of entity collections to load\n   */\n  protected loadCollectionsReducer(\n    entityCache: EntityCache,\n    action: LoadCollections\n  ) {\n    const { collections, tag } = action.payload;\n    const entityOp = EntityOp.ADD_ALL;\n    const entityNames = Object.keys(collections);\n    entityCache = entityNames.reduce((newCache, entityName) => {\n      const payload = {\n        entityName,\n        entityOp,\n        data: collections[entityName],\n      };\n      const act: EntityAction = {\n        type: `[${entityName}] ${action.type}`,\n        payload,\n      };\n      newCache = this.applyCollectionReducer(newCache, act);\n      return newCache;\n    }, entityCache);\n    return entityCache;\n  }\n\n  /**\n   * Reducer to merge query sets in the form of a hash of entity data for multiple collections.\n   * @param entityCache the entity cache\n   * @param action a MergeQuerySet action with the query set and a MergeStrategy\n   */\n  protected mergeQuerySetReducer(\n    entityCache: EntityCache,\n    action: MergeQuerySet\n  ) {\n    // tslint:disable-next-line:prefer-const\n    let { mergeStrategy, querySet, tag } = action.payload;\n    mergeStrategy =\n      mergeStrategy === null ? MergeStrategy.PreserveChanges : mergeStrategy;\n    const entityOp = EntityOp.UPSERT_MANY;\n\n    const entityNames = Object.keys(querySet);\n    entityCache = entityNames.reduce((newCache, entityName) => {\n      const payload = {\n        entityName,\n        entityOp,\n        data: querySet[entityName],\n        mergeStrategy,\n      };\n      const act: EntityAction = {\n        type: `[${entityName}] ${action.type}`,\n        payload,\n      };\n      newCache = this.applyCollectionReducer(newCache, act);\n      return newCache;\n    }, entityCache);\n    return entityCache;\n  }\n\n  // #region saveEntities reducers\n  protected saveEntitiesReducer(\n    entityCache: EntityCache,\n    action: SaveEntities\n  ) {\n    const {\n      changeSet,\n      correlationId,\n      isOptimistic,\n      mergeStrategy,\n      tag,\n    } = action.payload;\n\n    try {\n      changeSet.changes.forEach(item => {\n        const entityName = item.entityName;\n        const payload = {\n          entityName,\n          entityOp: getEntityOp(item),\n          data: item.entities,\n          correlationId,\n          isOptimistic,\n          mergeStrategy,\n          tag,\n        };\n\n        const act: EntityAction = {\n          type: `[${entityName}] ${action.type}`,\n          payload,\n        };\n        entityCache = this.applyCollectionReducer(entityCache, act);\n        if (act.payload.error) {\n          throw act.payload.error;\n        }\n      });\n    } catch (error) {\n      action.payload.error = error;\n    }\n\n    return entityCache;\n    function getEntityOp(item: ChangeSetItem) {\n      switch (item.op) {\n        case ChangeSetOperation.Add:\n          return EntityOp.SAVE_ADD_MANY;\n        case ChangeSetOperation.Delete:\n          return EntityOp.SAVE_DELETE_MANY;\n        case ChangeSetOperation.Update:\n          return EntityOp.SAVE_UPDATE_MANY;\n        case ChangeSetOperation.Upsert:\n          return EntityOp.SAVE_UPSERT_MANY;\n      }\n    }\n  }\n\n  protected saveEntitiesCancelReducer(\n    entityCache: EntityCache,\n    action: SaveEntitiesCancel\n  ) {\n    // This implementation can only clear the loading flag for the collections involved\n    // If the save was optimistic, you'll have to compensate to fix the cache as you think necessary\n    return this.clearLoadingFlags(\n      entityCache,\n      action.payload.entityNames || []\n    );\n  }\n\n  protected saveEntitiesErrorReducer(\n    entityCache: EntityCache,\n    action: SaveEntitiesError\n  ) {\n    const originalAction = action.payload.originalAction;\n    const originalChangeSet = originalAction.payload.changeSet;\n\n    // This implementation can only clear the loading flag for the collections involved\n    // If the save was optimistic, you'll have to compensate to fix the cache as you think necessary\n    const entityNames = originalChangeSet.changes.map(item => item.entityName);\n    return this.clearLoadingFlags(entityCache, entityNames);\n  }\n\n  protected saveEntitiesSuccessReducer(\n    entityCache: EntityCache,\n    action: SaveEntitiesSuccess\n  ) {\n    const {\n      changeSet,\n      correlationId,\n      isOptimistic,\n      mergeStrategy,\n      tag,\n    } = action.payload;\n\n    changeSet.changes.forEach(item => {\n      const entityName = item.entityName;\n      const payload = {\n        entityName,\n        entityOp: getEntityOp(item),\n        data: item.entities,\n        correlationId,\n        isOptimistic,\n        mergeStrategy,\n        tag,\n      };\n\n      const act: EntityAction = {\n        type: `[${entityName}] ${action.type}`,\n        payload,\n      };\n      entityCache = this.applyCollectionReducer(entityCache, act);\n    });\n\n    return entityCache;\n    function getEntityOp(item: ChangeSetItem) {\n      switch (item.op) {\n        case ChangeSetOperation.Add:\n          return EntityOp.SAVE_ADD_MANY_SUCCESS;\n        case ChangeSetOperation.Delete:\n          return EntityOp.SAVE_DELETE_MANY_SUCCESS;\n        case ChangeSetOperation.Update:\n          return EntityOp.SAVE_UPDATE_MANY_SUCCESS;\n        case ChangeSetOperation.Upsert:\n          return EntityOp.SAVE_UPSERT_MANY_SUCCESS;\n      }\n    }\n  }\n  // #endregion saveEntities reducers\n\n  // #region helpers\n  /** Apply reducer for the action's EntityCollection (if the action targets a collection) */\n  private applyCollectionReducer(\n    cache: EntityCache = {},\n    action: EntityAction\n  ) {\n    const entityName = action.payload.entityName;\n    const collection = cache[entityName];\n    const reducer = this.entityCollectionReducerRegistry.getOrCreateReducer(\n      entityName\n    );\n\n    let newCollection: EntityCollection;\n    try {\n      newCollection = collection\n        ? reducer(collection, action)\n        : reducer(this.entityCollectionCreator.create(entityName), action);\n    } catch (error) {\n      this.logger.error(error);\n      action.payload.error = error;\n    }\n\n    return action.payload.error || collection === newCollection!\n      ? cache\n      : { ...cache, [entityName]: newCollection! };\n  }\n\n  /** Ensure loading is false for every collection in entityNames */\n  private clearLoadingFlags(entityCache: EntityCache, entityNames: string[]) {\n    let isMutated = false;\n    entityNames.forEach(entityName => {\n      const collection = entityCache[entityName];\n      if (collection.loading) {\n        if (!isMutated) {\n          entityCache = { ...entityCache };\n          isMutated = true;\n        }\n        entityCache[entityName] = { ...collection, loading: false };\n      }\n    });\n    return entityCache;\n  }\n  // #endregion helpers\n}\n"]}