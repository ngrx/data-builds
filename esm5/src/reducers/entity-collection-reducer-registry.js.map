{"version":3,"file":"entity-collection-reducer-registry.js","sourceRoot":"ng://@ngrx/data/","sources":["src/reducers/entity-collection-reducer-registry.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAC7D,OAAO,EAAE,OAAO,EAAe,MAAM,aAAa,CAAC;AAInD,OAAO,EAAE,+BAA+B,EAAE,MAAM,aAAa,CAAC;AAC9D,OAAO,EAEL,8BAA8B,GAC/B,MAAM,6BAA6B,CAAC;;;;;AAGrC,8CAEC;;;;;AAMD;IAQE,yCACU,8BAA8D,EAGtE,4BAA4E;QAHpE,mCAA8B,GAA9B,8BAA8B,CAAgC;QAP9D,6BAAwB,GAA6B,EAAE,CAAC;QAYhE,IAAI,CAAC,2BAA2B,GAAG,mBAAA,OAAO,CAAC,KAAK,CAC9C,IAAI,EACJ,4BAA4B,IAAI,EAAE,CACnC,EAAO,CAAC;IACX,CAAC;IAED;;;OAGG;;;;;;;IACH,4DAAkB;;;;;;IAAlB,UAAsB,UAAkB;;YAClC,OAAO,GAA+B,IAAI,CAAC,wBAAwB,CACrE,UAAU,CACX;QAED,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAI,UAAU,CAAC,CAAC;YACpE,OAAO,GAAG,IAAI,CAAC,eAAe,CAAI,UAAU,EAAE,OAAO,CAAC,CAAC;YACvD,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC;SACrD;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;;;;;;OAQG;;;;;;;;;;;;IACH,yDAAe;;;;;;;;;;;IAAf,UACE,UAAkB,EAClB,OAAmC;QAEnC,OAAO,GAAG,IAAI,CAAC,2BAA2B,CAAC,mBAAA,OAAO,EAAO,CAAC,CAAC;QAC3D,OAAO,CAAC,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC;IACtE,CAAC;IAED;;;;;;;;;OASG;;;;;;;;;;;;IACH,0DAAgB;;;;;;;;;;;IAAhB,UAAiB,QAAkC;QAAnD,iBAGC;;YAFO,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;QAClD,IAAI,CAAC,OAAO;;;;QAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAxC,CAAwC,EAAC,CAAC;IAChE,CAAC;;gBAnEF,UAAU;;;;gBAZT,8BAA8B;4CAsB3B,QAAQ,YACR,MAAM,SAAC,+BAA+B;;IAyD3C,sCAAC;CAAA,AApED,IAoEC;SAnEY,+BAA+B;;;;;;IAC1C,mEAAkE;;;;;IAClE,sEAGE;;;;;IAGA,yEAAsE","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { compose, MetaReducer } from '@ngrx/store';\n\nimport { EntityAction } from '../actions/entity-action';\nimport { EntityCollection } from './entity-collection';\nimport { ENTITY_COLLECTION_META_REDUCERS } from './constants';\nimport {\n  EntityCollectionReducer,\n  EntityCollectionReducerFactory,\n} from './entity-collection-reducer';\n\n/** A hash of EntityCollectionReducers */\nexport interface EntityCollectionReducers {\n  [entity: string]: EntityCollectionReducer<any>;\n}\n\n/**\n * Registry of entity types and their previously-constructed reducers.\n * Can create a new CollectionReducer, which it registers for subsequent use.\n */\n@Injectable()\nexport class EntityCollectionReducerRegistry {\n  protected entityCollectionReducers: EntityCollectionReducers = {};\n  private entityCollectionMetaReducer: MetaReducer<\n    EntityCollection,\n    EntityAction\n  >;\n\n  constructor(\n    private entityCollectionReducerFactory: EntityCollectionReducerFactory,\n    @Optional()\n    @Inject(ENTITY_COLLECTION_META_REDUCERS)\n    entityCollectionMetaReducers?: MetaReducer<EntityCollection, EntityAction>[]\n  ) {\n    this.entityCollectionMetaReducer = compose.apply(\n      null,\n      entityCollectionMetaReducers || []\n    ) as any;\n  }\n\n  /**\n   * Get the registered EntityCollectionReducer<T> for this entity type or create one and register it.\n   * @param entityName Name of the entity type for this reducer\n   */\n  getOrCreateReducer<T>(entityName: string): EntityCollectionReducer<T> {\n    let reducer: EntityCollectionReducer<T> = this.entityCollectionReducers[\n      entityName\n    ];\n\n    if (!reducer) {\n      reducer = this.entityCollectionReducerFactory.create<T>(entityName);\n      reducer = this.registerReducer<T>(entityName, reducer);\n      this.entityCollectionReducers[entityName] = reducer;\n    }\n    return reducer;\n  }\n\n  /**\n   * Register an EntityCollectionReducer for an entity type\n   * @param entityName - the name of the entity type\n   * @param reducer - reducer for that entity type\n   *\n   * Examples:\n   *   registerReducer('Hero', myHeroReducer);\n   *   registerReducer('Villain', myVillainReducer);\n   */\n  registerReducer<T>(\n    entityName: string,\n    reducer: EntityCollectionReducer<T>\n  ): EntityCollectionReducer<T> {\n    reducer = this.entityCollectionMetaReducer(reducer as any);\n    return (this.entityCollectionReducers[entityName.trim()] = reducer);\n  }\n\n  /**\n   * Register a batch of EntityCollectionReducers.\n   * @param reducers - reducers to merge into existing reducers\n   *\n   * Examples:\n   *   registerReducers({\n   *     Hero: myHeroReducer,\n   *     Villain: myVillainReducer\n   *   });\n   */\n  registerReducers(reducers: EntityCollectionReducers) {\n    const keys = reducers ? Object.keys(reducers) : [];\n    keys.forEach(key => this.registerReducer(key, reducers[key]));\n  }\n}\n"]}