{"version":3,"file":"entity-commands.js","sourceRoot":"ng://@ngrx/data/","sources":["src/dispatchers/entity-commands.ts"],"names":[],"mappings":";;;;;;;;;;AAKA,0CA4GC;;;;;;;;;;IApGC,oEAA6D;;;;;;;;IAQ7D,sFAIQ;;;;;;;;IASR,uEAA8E;;;;;;;;IAS9E,oEAG+B;;;;;;;;;IAU/B,+DAAuD;;;;;;;;;;IAWvD,sEAAiE;;;;;;;;;;IAWjE,kFAGmB;;;;;;;;;IAUnB,6DAAqD;;;;;;;;;;IAWrD,uEAAyE;;;;;;;;;;IAUzE,uEAAgE;;;;;;;AAKlE,yCA4HC;;;;;;;;;IArHC,+EAAkE;;;;;;;;;IASlE,6EAA8D;;;;;;;;;IAS9D,gFAAmE;;;;;;IAGnE,kEAAgD;;;;;;;;IAQhD,kFAAmE;;;;;;;;IAQnE,+EAA8E;;;;;;;;IAQ9E,qFAAwE;;;;;;;;IAQxE,iFAGQ;;;;;;;;;;;IAWR,gFAA0E;;;;;;;;;;;IAW1E,mFAGQ;;;;;;;;;;IAUR,gFAA0E;;;;;;;;;;IAU1E,mFAGQ;;;;;;;;IAMR,0EAA6D;;;;;;;IAG7D,2EAAkE;;;;;;;IAGlE,6EAAoE;;;;;;;AAItE,oCAE6B","sourcesContent":["import { Observable } from 'rxjs';\nimport { EntityActionOptions } from '../actions/entity-action';\nimport { QueryParams } from '../dataservices/interfaces';\n\n/** Commands that update the remote server. */\nexport interface EntityServerCommands<T> {\n  /**\n   * Dispatch action to save a new entity to remote storage.\n   * @param entity entity to add, which may omit its key if pessimistic and the server creates the key;\n   * must have a key if optimistic save.\n   * @returns A terminating Observable of the entity\n   * after server reports successful save or the save error.\n   */\n  add(entity: T, options?: EntityActionOptions): Observable<T>;\n\n  /**\n   * Dispatch action to cancel the persistence operation (query or save) with the given correlationId.\n   * @param correlationId The correlation id for the corresponding EntityAction\n   * @param [reason] explains why canceled and by whom.\n   * @param [options] options such as the tag\n   */\n  cancel(\n    correlationId: any,\n    reason?: string,\n    options?: EntityActionOptions\n  ): void;\n\n  /**\n   * Dispatch action to delete entity from remote storage by key.\n   * @param key The entity to delete\n   * @param [options] options that influence save and merge behavior\n   * @returns A terminating Observable of the deleted key\n   * after server reports successful save or the save error.\n   */\n  delete(entity: T, options?: EntityActionOptions): Observable<number | string>;\n\n  /**\n   * Dispatch action to delete entity from remote storage by key.\n   * @param key The primary key of the entity to remove\n   * @param [options] options that influence save and merge behavior\n   * @returns Observable of the deleted key\n   * after server reports successful save or the save error.\n   */\n  delete(\n    key: number | string,\n    options?: EntityActionOptions\n  ): Observable<number | string>;\n\n  /**\n   * Dispatch action to query remote storage for all entities and\n   * merge the queried entities into the cached collection.\n   * @param [options] options that influence merge behavior\n   * @returns A terminating Observable of the collection\n   * after server reports successful query or the query error.\n   * @see load()\n   */\n  getAll(options?: EntityActionOptions): Observable<T[]>;\n\n  /**\n   * Dispatch action to query remote storage for the entity with this primary key.\n   * If the server returns an entity,\n   * merge it into the cached collection.\n   * @param key The primary key of the entity to get.\n   * @param [options] options that influence merge behavior\n   * @returns A terminating Observable of the queried entities that are in the collection\n   * after server reports success or the query error.\n   */\n  getByKey(key: any, options?: EntityActionOptions): Observable<T>;\n\n  /**\n   * Dispatch action to query remote storage for the entities that satisfy a query expressed\n   * with either a query parameter map or an HTTP URL query string,\n   * and merge the results into the cached collection.\n   * @param queryParams the query in a form understood by the server\n   * @param [options] options that influence merge behavior\n   * @returns A terminating Observable of the queried entities\n   * after server reports successful query or the query error.\n   */\n  getWithQuery(\n    queryParams: QueryParams | string,\n    options?: EntityActionOptions\n  ): Observable<T[]>;\n\n  /**\n   * Dispatch action to query remote storage for all entities and\n   * completely replace the cached collection with the queried entities.\n   * @param [options] options that influence load behavior\n   * @returns A terminating Observable of the entities in the collection\n   * after server reports successful query or the query error.\n   * @see getAll\n   */\n  load(options?: EntityActionOptions): Observable<T[]>;\n\n  /**\n   * Dispatch action to save the updated entity (or partial entity) in remote storage.\n   * The update entity may be partial (but must have its key)\n   * in which case it patches the existing entity.\n   * @param entity update entity, which might be a partial of T but must at least have its key.\n   * @param [options] options that influence save and merge behavior\n   * @returns A terminating Observable of the updated entity\n   * after server reports successful save or the save error.\n   */\n  update(entity: Partial<T>, options?: EntityActionOptions): Observable<T>;\n\n  /**\n   * Dispatch action to save a new or update an existing entity to remote storage.\n   * Only dispatch this action if your server supports upsert.\n   * @param entity entity to upsert, which may omit its key if pessimistic and the server creates the key;\n   * must have a key if optimistic save.\n   * @returns A terminating Observable of the entity\n   * after server reports successful save or the save error.\n   */\n  upsert(entity: T, options?: EntityActionOptions): Observable<T>;\n}\n\n/*** A collection's cache-only commands, which do not update remote storage ***/\n\nexport interface EntityCacheCommands<T> {\n  /**\n   * Replace all entities in the cached collection.\n   * Does not save to remote storage.\n   * @param entities to add directly to cache.\n   * @param [options] options such as mergeStrategy\n   */\n  addAllToCache(entities: T[], options?: EntityActionOptions): void;\n\n  /**\n   * Add a new entity directly to the cache.\n   * Does not save to remote storage.\n   * Ignored if an entity with the same primary key is already in cache.\n   * @param entity to add directly to cache.\n   * @param [options] options such as mergeStrategy\n   */\n  addOneToCache(entity: T, options?: EntityActionOptions): void;\n\n  /**\n   * Add multiple new entities directly to the cache.\n   * Does not save to remote storage.\n   * Entities with primary keys already in cache are ignored.\n   * @param entities to add directly to cache.\n   * @param [options] options such as mergeStrategy\n   */\n  addManyToCache(entities: T[], options?: EntityActionOptions): void;\n\n  /** Clear the cached entity collection */\n  clearCache(options?: EntityActionOptions): void;\n\n  /**\n   * Remove an entity directly from the cache.\n   * Does not delete that entity from remote storage.\n   * @param entity The entity to remove\n   * @param [options] options such as mergeStrategy\n   */\n  removeOneFromCache(entity: T, options?: EntityActionOptions): void;\n\n  /**\n   * Remove an entity directly from the cache.\n   * Does not delete that entity from remote storage.\n   * @param key The primary key of the entity to remove\n   * @param [options] options such as mergeStrategy\n   */\n  removeOneFromCache(key: number | string, options?: EntityActionOptions): void;\n\n  /**\n   * Remove multiple entities directly from the cache.\n   * Does not delete these entities from remote storage.\n   * @param entity The entities to remove\n   * @param [options] options such as mergeStrategy\n   */\n  removeManyFromCache(entities: T[], options?: EntityActionOptions): void;\n\n  /**\n   * Remove multiple entities directly from the cache.\n   * Does not delete these entities from remote storage.\n   * @param keys The primary keys of the entities to remove\n   * @param [options] options such as mergeStrategy\n   */\n  removeManyFromCache(\n    keys: (number | string)[],\n    options?: EntityActionOptions\n  ): void;\n\n  /**\n   * Update a cached entity directly.\n   * Does not update that entity in remote storage.\n   * Ignored if an entity with matching primary key is not in cache.\n   * The update entity may be partial (but must have its key)\n   * in which case it patches the existing entity.\n   * @param entity to update directly in cache.\n   * @param [options] options such as mergeStrategy\n   */\n  updateOneInCache(entity: Partial<T>, options?: EntityActionOptions): void;\n\n  /**\n   * Update multiple cached entities directly.\n   * Does not update these entities in remote storage.\n   * Entities whose primary keys are not in cache are ignored.\n   * Update entities may be partial but must at least have their keys.\n   * such partial entities patch their cached counterparts.\n   * @param entities to update directly in cache.\n   * @param [options] options such as mergeStrategy\n   */\n  updateManyInCache(\n    entities: Partial<T>[],\n    options?: EntityActionOptions\n  ): void;\n\n  /**\n   * Insert or update a cached entity directly.\n   * Does not save to remote storage.\n   * Upsert entity might be a partial of T but must at least have its key.\n   * Pass the Update<T> structure as the payload.\n   * @param entity to upsert directly in cache.\n   * @param [options] options such as mergeStrategy\n   */\n  upsertOneInCache(entity: Partial<T>, options?: EntityActionOptions): void;\n\n  /**\n   * Insert or update multiple cached entities directly.\n   * Does not save to remote storage.\n   * Upsert entities might be partial but must at least have their keys.\n   * Pass an array of the Update<T> structure as the payload.\n   * @param entities to upsert directly in cache.\n   * @param [options] options such as mergeStrategy\n   */\n  upsertManyInCache(\n    entities: Partial<T>[],\n    options?: EntityActionOptions\n  ): void;\n\n  /**\n   * Set the pattern that the collection's filter applies\n   * when using the `filteredEntities` selector.\n   */\n  setFilter(pattern: any, options?: EntityActionOptions): void;\n\n  /** Set the loaded flag */\n  setLoaded(isLoaded: boolean, options?: EntityActionOptions): void;\n\n  /** Set the loading flag */\n  setLoading(isLoading: boolean, options?: EntityActionOptions): void;\n}\n\n/** Commands that dispatch entity actions for a collection */\nexport interface EntityCommands<T>\n  extends EntityServerCommands<T>,\n    EntityCacheCommands<T> {}\n"]}