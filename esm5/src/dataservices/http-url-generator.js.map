{"version":3,"file":"http-url-generator.js","sourceRoot":"ng://@ngrx/data/","sources":["src/dataservices/http-url-generator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;;;;;;;;AAQjD;;;;;;;;IAAA;IAEA,CAAC;IAAD,6BAAC;AAAD,CAAC,AAFD,IAEC;;;;;;;;;;;;;;AAMD,sCAeC;;;;;;;;;IARC,6CAA0B;;;;;;;;IAO1B,iDAA8B;;;;;;;AAOhC;;;;;;IAAA;IAoBA,CAAC;IAAD,uBAAC;AAAD,CAAC,AApBD,IAoBC;;;;;;;;;;;;;;;;IAfC,4EAAkE;;;;;;;;;IAMlE,gFAAsE;;;;;;;IAMtE,4FAEQ;;AAGV;IAUE,iCAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;;;;;;;QAFhC,0BAAqB,GAA2B,EAAE,CAAC;IAEhB,CAAC;IAE9C;;;;OAIG;;;;;;;;IACO,iDAAe;;;;;;;IAAzB,UACE,UAAkB,EAClB,IAAY;;;YAER,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC;QACzD,IAAI,CAAC,YAAY,EAAE;;gBACX,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC;YACjC,YAAY,GAAG;gBACb,iBAAiB,EAAE,CAAG,KAAK,SAAI,UAAU,MAAG,CAAA,CAAC,WAAW,EAAE;gBAC1D,qBAAqB,EAAE,CAAG,KAAK,SAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAC1D,UAAU,CACX,MAAG,CAAA,CAAC,WAAW,EAAE;aACnB,CAAC;YACF,IAAI,CAAC,wBAAwB,WAAG,GAAC,UAAU,IAAG,YAAY,MAAG,CAAC;SAC/D;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;;;;OAKG;;;;;;;IACH,gDAAc;;;;;;IAAd,UAAe,UAAkB,EAAE,IAAY;QAC7C,OAAO,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,iBAAiB,CAAC;IAClE,CAAC;IAED;;;;;OAKG;;;;;;;IACH,oDAAkB;;;;;;IAAlB,UAAmB,UAAkB,EAAE,IAAY;QACjD,OAAO,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,qBAAqB,CAAC;IACtE,CAAC;IAED;;;;;OAKG;;;;;;;;IACH,0DAAwB;;;;;;;IAAxB,UACE,sBAA8C;QAE9C,IAAI,CAAC,qBAAqB,yBACrB,IAAI,CAAC,qBAAqB,GAC1B,CAAC,sBAAsB,IAAI,EAAE,CAAC,CAClC,CAAC;IACJ,CAAC;;gBApEF,UAAU;;;;gBA3DF,UAAU;;IAgInB,8BAAC;CAAA,AArED,IAqEC;SApEY,uBAAuB;;;;;;;;;;IAOlC,wDAA6D;;;;;IAEjD,6CAA8B;;;;;;;AA8D5C,MAAM,UAAU,aAAa,CAAC,IAAY;IACxC,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;AAChD,CAAC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Pluralizer } from '../utils/interfaces';\n\n/**\n * Known resource URLS for specific entity types.\n * Each entity's resource URLS are endpoints that\n * target single entity and multi-entity HTTP operations.\n * Used by the `DefaultHttpUrlGenerator`.\n */\nexport abstract class EntityHttpResourceUrls {\n  [entityName: string]: HttpResourceUrls;\n}\n\n/**\n * Resource URLS for HTTP operations that target single entity\n * and multi-entity endpoints.\n */\nexport interface HttpResourceUrls {\n  /**\n   * The URL path for a single entity endpoint, e.g, `some-api-root/hero/`\n   * such as you'd use to add a hero.\n   * Example: `httpClient.post<Hero>('some-api-root/hero/', addedHero)`.\n   * Note trailing slash (/).\n   */\n  entityResourceUrl: string;\n  /**\n   * The URL path for a multiple-entity endpoint, e.g, `some-api-root/heroes/`\n   * such as you'd use when getting all heroes.\n   * Example: `httpClient.get<Hero[]>('some-api-root/heroes/')`\n   * Note trailing slash (/).\n   */\n  collectionResourceUrl: string;\n}\n\n/**\n * Generate the base part of an HTTP URL for\n * single entity or entity collection resource\n */\nexport abstract class HttpUrlGenerator {\n  /**\n   * Return the base URL for a single entity resource,\n   * e.g., the base URL to get a single hero by its id\n   */\n  abstract entityResource(entityName: string, root: string): string;\n\n  /**\n   * Return the base URL for a collection resource,\n   * e.g., the base URL to get all heroes\n   */\n  abstract collectionResource(entityName: string, root: string): string;\n\n  /**\n   * Register known single-entity and collection resource URLs for HTTP calls\n   * @param entityHttpResourceUrls {EntityHttpResourceUrls} resource urls for specific entity type names\n   */\n  abstract registerHttpResourceUrls(\n    entityHttpResourceUrls?: EntityHttpResourceUrls\n  ): void;\n}\n\n@Injectable()\nexport class DefaultHttpUrlGenerator implements HttpUrlGenerator {\n  /**\n   * Known single-entity and collection resource URLs for HTTP calls.\n   * Generator methods returns these resource URLs for a given entity type name.\n   * If the resources for an entity type name are not know, it generates\n   * and caches a resource name for future use\n   */\n  protected knownHttpResourceUrls: EntityHttpResourceUrls = {};\n\n  constructor(private pluralizer: Pluralizer) {}\n\n  /**\n   * Get or generate the entity and collection resource URLs for the given entity type name\n   * @param entityName {string} Name of the entity type, e.g, 'Hero'\n   * @param root {string} Root path to the resource, e.g., 'some-api`\n   */\n  protected getResourceUrls(\n    entityName: string,\n    root: string\n  ): HttpResourceUrls {\n    let resourceUrls = this.knownHttpResourceUrls[entityName];\n    if (!resourceUrls) {\n      const nRoot = normalizeRoot(root);\n      resourceUrls = {\n        entityResourceUrl: `${nRoot}/${entityName}/`.toLowerCase(),\n        collectionResourceUrl: `${nRoot}/${this.pluralizer.pluralize(\n          entityName\n        )}/`.toLowerCase(),\n      };\n      this.registerHttpResourceUrls({ [entityName]: resourceUrls });\n    }\n    return resourceUrls;\n  }\n\n  /**\n   * Create the path to a single entity resource\n   * @param entityName {string} Name of the entity type, e.g, 'Hero'\n   * @param root {string} Root path to the resource, e.g., 'some-api`\n   * @returns complete path to resource, e.g, 'some-api/hero'\n   */\n  entityResource(entityName: string, root: string): string {\n    return this.getResourceUrls(entityName, root).entityResourceUrl;\n  }\n\n  /**\n   * Create the path to a multiple entity (collection) resource\n   * @param entityName {string} Name of the entity type, e.g, 'Hero'\n   * @param root {string} Root path to the resource, e.g., 'some-api`\n   * @returns complete path to resource, e.g, 'some-api/heroes'\n   */\n  collectionResource(entityName: string, root: string): string {\n    return this.getResourceUrls(entityName, root).collectionResourceUrl;\n  }\n\n  /**\n   * Register known single-entity and collection resource URLs for HTTP calls\n   * @param entityHttpResourceUrls {EntityHttpResourceUrls} resource urls for specific entity type names\n   * Well-formed resource urls end in a '/';\n   * Note: this method does not ensure that resource urls are well-formed.\n   */\n  registerHttpResourceUrls(\n    entityHttpResourceUrls: EntityHttpResourceUrls\n  ): void {\n    this.knownHttpResourceUrls = {\n      ...this.knownHttpResourceUrls,\n      ...(entityHttpResourceUrls || {}),\n    };\n  }\n}\n\n/** Remove leading & trailing spaces or slashes */\nexport function normalizeRoot(root: string) {\n  return root.replace(/^[\\/\\s]+|[\\/\\s]+$/g, '');\n}\n"]}