{"version":3,"file":"entity-data.service.js","sourceRoot":"ng://@ngrx/data/","sources":["src/dataservices/entity-data.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAG3C,OAAO,EAAE,yBAAyB,EAAE,MAAM,wBAAwB,CAAC;;;;;AAMnE;IAIE,4DAA4D;IAC5D,sDAAsD;IACtD,2BAAsB,yBAAoD;QAApD,8BAAyB,GAAzB,yBAAyB,CAA2B;QAJhE,aAAQ,GAAyD,EAAE,CAAC;IAID,CAAC;IAE9E;;;;;;;OAOG;;;;;;;;;;;IACH,sCAAU;;;;;;;;;;IAAV,UAAc,UAAkB;QAC9B,UAAU,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;;YAC3B,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;QACvC,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC5D,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC;SACrC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;;;;;;OAQG;;;;;;;;;;;;IACH,2CAAe;;;;;;;;;;;IAAf,UACE,UAAkB,EAClB,OAAuC;QAEvC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,GAAG,OAAO,CAAC;IAC7C,CAAC;IAED;;;;;;;;;OASG;;;;;;;;;;;;IACH,4CAAgB;;;;;;;;;;;IAAhB,UAAiB,QAEhB;QACC,IAAI,CAAC,QAAQ,yBAAQ,IAAI,CAAC,QAAQ,GAAK,QAAQ,CAAE,CAAC;IACpD,CAAC;;gBAxDF,UAAU;;;;gBANF,yBAAyB;;IA+DlC,wBAAC;CAAA,AAzDD,IAyDC;SAxDY,iBAAiB;;;;;;IAC5B,qCAA8E;;;;;IAIlE,sDAA8D","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { EntityCollectionDataService } from './interfaces';\nimport { DefaultDataServiceFactory } from './default-data.service';\n\n/**\n * Registry of EntityCollection data services that make REST-like CRUD calls\n * to entity collection endpoints.\n */\n@Injectable()\nexport class EntityDataService {\n  protected services: { [name: string]: EntityCollectionDataService<any> } = {};\n\n  // TODO:  Optionally inject specialized entity data services\n  // for those that aren't derived from BaseDataService.\n  constructor(protected defaultDataServiceFactory: DefaultDataServiceFactory) {}\n\n  /**\n   * Get (or create) a data service for entity type\n   * @param entityName - the name of the type\n   *\n   * Examples:\n   *   getService('Hero'); // data service for Heroes, untyped\n   *   getService<Hero>('Hero'); // data service for Heroes, typed as Hero\n   */\n  getService<T>(entityName: string): EntityCollectionDataService<T> {\n    entityName = entityName.trim();\n    let service = this.services[entityName];\n    if (!service) {\n      service = this.defaultDataServiceFactory.create(entityName);\n      this.services[entityName] = service;\n    }\n    return service;\n  }\n\n  /**\n   * Register an EntityCollectionDataService for an entity type\n   * @param entityName - the name of the entity type\n   * @param service - data service for that entity type\n   *\n   * Examples:\n   *   registerService('Hero', myHeroDataService);\n   *   registerService('Villain', myVillainDataService);\n   */\n  registerService<T>(\n    entityName: string,\n    service: EntityCollectionDataService<T>\n  ) {\n    this.services[entityName.trim()] = service;\n  }\n\n  /**\n   * Register a batch of data services.\n   * @param services - data services to merge into existing services\n   *\n   * Examples:\n   *   registerServices({\n   *     Hero: myHeroDataService,\n   *     Villain: myVillainDataService\n   *   });\n   */\n  registerServices(services: {\n    [name: string]: EntityCollectionDataService<any>;\n  }) {\n    this.services = { ...this.services, ...services };\n  }\n}\n"]}