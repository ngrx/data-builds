{"version":3,"file":"entity-cache-data.service.js","sourceRoot":"ng://@ngrx/data/","sources":["src/dataservices/entity-cache-data.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, delay, map, timeout } from 'rxjs/operators';\n\nimport { IdSelector } from '@ngrx/entity';\n\nimport {\n  ChangeSetOperation,\n  ChangeSet,\n  ChangeSetItem,\n  ChangeSetUpdate,\n  excludeEmptyChangeSetItems,\n} from '../actions/entity-cache-change-set';\nimport { DataServiceError } from './data-service-error';\nimport { DefaultDataServiceConfig } from './default-data-service-config';\nimport { EntityDefinitionService } from '../entity-metadata/entity-definition.service';\nimport { RequestData } from './interfaces';\n\nconst updateOp = ChangeSetOperation.Update;\n\n/**\n * Default data service for making remote service calls targeting the entire EntityCache.\n * See EntityDataService for services that target a single EntityCollection\n */\n@Injectable()\nexport class EntityCacheDataService {\n  protected idSelectors: { [entityName: string]: IdSelector<any> } = {};\n  protected saveDelay = 0;\n  protected timeout = 0;\n\n  constructor(\n    protected entityDefinitionService: EntityDefinitionService,\n    protected http: HttpClient,\n    @Optional() config?: DefaultDataServiceConfig\n  ) {\n    const { saveDelay = 0, timeout: to = 0 } = config || {};\n    this.saveDelay = saveDelay;\n    this.timeout = to;\n  }\n\n  /**\n   * Save changes to multiple entities across one or more entity collections.\n   * Server endpoint must understand the essential SaveEntities protocol,\n   * in particular the ChangeSet interface (except for Update<T>).\n   * This implementation extracts the entity changes from a ChangeSet Update<T>[] and sends those.\n   * It then reconstructs Update<T>[] in the returned observable result.\n   * @param changeSet  An array of SaveEntityItems.\n   * Each SaveEntityItem describe a change operation for one or more entities of a single collection,\n   * known by its 'entityName'.\n   * @param url The server endpoint that receives this request.\n   */\n  saveEntities(changeSet: ChangeSet, url: string): Observable<ChangeSet> {\n    changeSet = this.filterChangeSet(changeSet);\n    // Assume server doesn't understand @ngrx/entity Update<T> structure;\n    // Extract the entity changes from the Update<T>[] and restore on the return from server\n    changeSet = this.flattenUpdates(changeSet);\n\n    let result$: Observable<ChangeSet> = this.http\n      .post<ChangeSet>(url, changeSet)\n      .pipe(\n        map(result => this.restoreUpdates(result)),\n        catchError(this.handleError({ method: 'POST', url, data: changeSet }))\n      );\n\n    if (this.timeout) {\n      result$ = result$.pipe(timeout(this.timeout));\n    }\n\n    if (this.saveDelay) {\n      result$ = result$.pipe(delay(this.saveDelay));\n    }\n\n    return result$;\n  }\n\n  // #region helpers\n  protected handleError(reqData: RequestData) {\n    return (err: any) => {\n      const error = new DataServiceError(err, reqData);\n      return throwError(error);\n    };\n  }\n\n  /**\n   * Filter changeSet to remove unwanted ChangeSetItems.\n   * This implementation excludes null and empty ChangeSetItems.\n   * @param changeSet ChangeSet with changes to filter\n   */\n  protected filterChangeSet(changeSet: ChangeSet): ChangeSet {\n    return excludeEmptyChangeSetItems(changeSet);\n  }\n\n  /**\n   * Convert the entities in update changes from @ngrx Update<T> structure to just T.\n   * Reverse of restoreUpdates().\n   */\n  protected flattenUpdates(changeSet: ChangeSet): ChangeSet {\n    let changes = changeSet.changes;\n    if (changes.length === 0) {\n      return changeSet;\n    }\n    let hasMutated = false;\n    changes = changes.map(item => {\n      if (item.op === updateOp && item.entities.length > 0) {\n        hasMutated = true;\n        return {\n          ...item,\n          entities: (item as ChangeSetUpdate).entities.map(u => u.changes),\n        };\n      } else {\n        return item;\n      }\n    }) as ChangeSetItem[];\n    return hasMutated ? { ...changeSet, changes } : changeSet;\n  }\n\n  /**\n   * Convert the flattened T entities in update changes back to @ngrx Update<T> structures.\n   * Reverse of flattenUpdates().\n   */\n  protected restoreUpdates(changeSet: ChangeSet): ChangeSet {\n    if (changeSet == null) {\n      // Nothing? Server probably responded with 204 - No Content because it made no changes to the inserted or updated entities\n      return changeSet;\n    }\n    let changes = changeSet.changes;\n    if (changes.length === 0) {\n      return changeSet;\n    }\n    let hasMutated = false;\n    changes = changes.map(item => {\n      if (item.op === updateOp) {\n        // These are entities, not Updates; convert back to Updates\n        hasMutated = true;\n        const selectId = this.getIdSelector(item.entityName);\n        return {\n          ...item,\n          entities: item.entities.map((u: any) => ({\n            id: selectId(u),\n            changes: u,\n          })),\n        } as ChangeSetUpdate;\n      } else {\n        return item;\n      }\n    }) as ChangeSetItem[];\n    return hasMutated ? { ...changeSet, changes } : changeSet;\n  }\n\n  /**\n   * Get the id (primary key) selector function for an entity type\n   * @param entityName name of the entity type\n   */\n  protected getIdSelector(entityName: string) {\n    let idSelector = this.idSelectors[entityName];\n    if (!idSelector) {\n      idSelector = this.entityDefinitionService.getDefinition(entityName)\n        .selectId;\n      this.idSelectors[entityName] = idSelector;\n    }\n    return idSelector;\n  }\n  // #endregion helpers\n}\n"]}