{"version":3,"file":"default-data.service.js","sourceRoot":"ng://@ngrx/data/","sources":["src/dataservices/default-data.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport {\n  HttpClient,\n  HttpErrorResponse,\n  HttpParams,\n} from '@angular/common/http';\n\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, delay, map, timeout } from 'rxjs/operators';\n\nimport { Update } from '@ngrx/entity';\n\nimport { DataServiceError } from './data-service-error';\nimport { DefaultDataServiceConfig } from './default-data-service-config';\nimport {\n  EntityCollectionDataService,\n  HttpMethods,\n  QueryParams,\n  RequestData,\n} from './interfaces';\nimport { HttpUrlGenerator } from './http-url-generator';\n\n/**\n * A basic, generic entity data service\n * suitable for persistence of most entities.\n * Assumes a common REST-y web API\n */\nexport class DefaultDataService<T> implements EntityCollectionDataService<T> {\n  protected _name: string;\n  protected delete404OK: boolean;\n  protected entityName: string;\n  protected entityUrl: string;\n  protected entitiesUrl: string;\n  protected getDelay = 0;\n  protected saveDelay = 0;\n  protected timeout = 0;\n\n  get name() {\n    return this._name;\n  }\n\n  constructor(\n    entityName: string,\n    protected http: HttpClient,\n    protected httpUrlGenerator: HttpUrlGenerator,\n    config?: DefaultDataServiceConfig\n  ) {\n    this._name = `${entityName} DefaultDataService`;\n    this.entityName = entityName;\n    const {\n      root = 'api',\n      delete404OK = true,\n      getDelay = 0,\n      saveDelay = 0,\n      timeout: to = 0,\n    } =\n      config || {};\n    this.delete404OK = delete404OK;\n    this.entityUrl = httpUrlGenerator.entityResource(entityName, root);\n    this.entitiesUrl = httpUrlGenerator.collectionResource(entityName, root);\n    this.getDelay = getDelay;\n    this.saveDelay = saveDelay;\n    this.timeout = to;\n  }\n\n  add(entity: T): Observable<T> {\n    const entityOrError =\n      entity || new Error(`No \"${this.entityName}\" entity to add`);\n    return this.execute('POST', this.entityUrl, entityOrError);\n  }\n\n  delete(key: number | string): Observable<number | string> {\n    let err: Error | undefined;\n    if (key == null) {\n      err = new Error(`No \"${this.entityName}\" key to delete`);\n    }\n    return this.execute('DELETE', this.entityUrl + key, err).pipe(\n      // forward the id of deleted entity as the result of the HTTP DELETE\n      map(result => key as number | string)\n    );\n  }\n\n  getAll(): Observable<T[]> {\n    return this.execute('GET', this.entitiesUrl);\n  }\n\n  getById(key: number | string): Observable<T> {\n    let err: Error | undefined;\n    if (key == null) {\n      err = new Error(`No \"${this.entityName}\" key to get`);\n    }\n    return this.execute('GET', this.entityUrl + key, err);\n  }\n\n  getWithQuery(queryParams: QueryParams | string): Observable<T[]> {\n    const qParams =\n      typeof queryParams === 'string'\n        ? { fromString: queryParams }\n        : { fromObject: queryParams };\n    const params = new HttpParams(qParams);\n    return this.execute('GET', this.entitiesUrl, undefined, { params });\n  }\n\n  update(update: Update<T>): Observable<T> {\n    const id = update && update.id;\n    const updateOrError =\n      id == null\n        ? new Error(`No \"${this.entityName}\" update data or id`)\n        : update.changes;\n    return this.execute('PUT', this.entityUrl + id, updateOrError);\n  }\n\n  // Important! Only call if the backend service supports upserts as a POST to the target URL\n  upsert(entity: T): Observable<T> {\n    const entityOrError =\n      entity || new Error(`No \"${this.entityName}\" entity to upsert`);\n    return this.execute('POST', this.entityUrl, entityOrError);\n  }\n\n  protected execute(\n    method: HttpMethods,\n    url: string,\n    data?: any, // data, error, or undefined/null\n    options?: any\n  ): Observable<any> {\n    const req: RequestData = { method, url, data, options };\n\n    if (data instanceof Error) {\n      return this.handleError(req)(data);\n    }\n\n    let result$: Observable<ArrayBuffer>;\n\n    switch (method) {\n      case 'DELETE': {\n        result$ = this.http.delete(url, options);\n        if (this.saveDelay) {\n          result$ = result$.pipe(delay(this.saveDelay));\n        }\n        break;\n      }\n      case 'GET': {\n        result$ = this.http.get(url, options);\n        if (this.getDelay) {\n          result$ = result$.pipe(delay(this.getDelay));\n        }\n        break;\n      }\n      case 'POST': {\n        result$ = this.http.post(url, data, options);\n        if (this.saveDelay) {\n          result$ = result$.pipe(delay(this.saveDelay));\n        }\n        break;\n      }\n      // N.B.: It must return an Update<T>\n      case 'PUT': {\n        result$ = this.http.put(url, data, options);\n        if (this.saveDelay) {\n          result$ = result$.pipe(delay(this.saveDelay));\n        }\n        break;\n      }\n      default: {\n        const error = new Error('Unimplemented HTTP method, ' + method);\n        result$ = throwError(error);\n      }\n    }\n    if (this.timeout) {\n      result$ = result$.pipe(timeout(this.timeout + this.saveDelay));\n    }\n    return result$.pipe(catchError(this.handleError(req)));\n  }\n\n  private handleError(reqData: RequestData) {\n    return (err: any) => {\n      const ok = this.handleDelete404(err, reqData);\n      if (ok) {\n        return ok;\n      }\n      const error = new DataServiceError(err, reqData);\n      return throwError(error);\n    };\n  }\n\n  private handleDelete404(error: HttpErrorResponse, reqData: RequestData) {\n    if (\n      error.status === 404 &&\n      reqData.method === 'DELETE' &&\n      this.delete404OK\n    ) {\n      return of({});\n    }\n    return undefined;\n  }\n}\n\n/**\n * Create a basic, generic entity data service\n * suitable for persistence of most entities.\n * Assumes a common REST-y web API\n */\n@Injectable()\nexport class DefaultDataServiceFactory {\n  constructor(\n    protected http: HttpClient,\n    protected httpUrlGenerator: HttpUrlGenerator,\n    @Optional() protected config?: DefaultDataServiceConfig\n  ) {\n    config = config || {};\n    httpUrlGenerator.registerHttpResourceUrls(config.entityHttpResourceUrls);\n  }\n\n  /**\n   * Create a default {EntityCollectionDataService} for the given entity type\n   * @param entityName {string} Name of the entity type for this data service\n   */\n  create<T>(entityName: string): EntityCollectionDataService<T> {\n    return new DefaultDataService<T>(\n      entityName,\n      this.http,\n      this.httpUrlGenerator,\n      this.config\n    );\n  }\n}\n"]}