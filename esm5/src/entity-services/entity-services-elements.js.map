{"version":3,"file":"entity-services-elements.js","sourceRoot":"ng://@ngrx/data/","sources":["src/entity-services/entity-services-elements.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAU,KAAK,EAAE,MAAM,aAAa,CAAC;AAK5C,OAAO,EAAE,uBAAuB,EAAE,MAAM,0CAA0C,CAAC;AACnF,OAAO,EAAE,uBAAuB,EAAE,MAAM,gCAAgC,CAAC;AACzE,OAAO,EAAE,8BAA8B,EAAE,MAAM,qCAAqC,CAAC;;;;AAGrF;IAEE,gCAKkB,8BAA8D;IAC9E,uDAAuD;IACvD,uBAAgD;IAChD,kEAAkE;IAClE,uBAAgD,EAEhC,KAAyB;QANzB,mCAA8B,GAA9B,8BAA8B,CAAgC;QAM9D,UAAK,GAAL,KAAK,CAAoB;QAEzC,IAAI,CAAC,mBAAmB,GAAG,uBAAuB,CAAC,mBAAmB,CAAC;QACvE,IAAI,CAAC,YAAY,GAAG,uBAAuB,CAAC,YAAY,CAAC;QACzD,IAAI,CAAC,eAAe,GAAG,uBAAuB,CAAC,eAAe,CAAC;IACjE,CAAC;;gBAlBF,UAAU;;;;gBAHF,8BAA8B;gBAF9B,uBAAuB;gBACvB,uBAAuB;gBANf,KAAK;;IAyCtB,6BAAC;CAAA,AA/BD,IA+BC;SA9BY,sBAAsB;;;;;;IAoBjC,qDAAuD;;;;;IAGvD,8CAAoE;;;;;;IAMpE,iDAA6C;;;;;;IAvB3C,gEAA8E;;;;;IAM9E,uCAAyC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Action, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { EntityAction } from '../actions/entity-action';\nimport { EntityCache } from '../reducers/entity-cache';\nimport { EntityDispatcherFactory } from '../dispatchers/entity-dispatcher-factory';\nimport { EntitySelectors$Factory } from '../selectors/entity-selectors$';\nimport { EntityCollectionServiceFactory } from './entity-collection-service-factory';\n\n/** Core ingredients of an EntityServices class */\n@Injectable()\nexport class EntityServicesElements {\n  constructor(\n    /**\n     * Creates EntityCollectionService instances for\n     * a cached collection of T entities in the ngrx store.\n     */\n    public readonly entityCollectionServiceFactory: EntityCollectionServiceFactory,\n    /** Creates EntityDispatchers for entity collections */\n    entityDispatcherFactory: EntityDispatcherFactory,\n    /** Creates observable EntitySelectors$ for entity collections. */\n    entitySelectors$Factory: EntitySelectors$Factory,\n    /** The ngrx store, scoped to the EntityCache */\n    public readonly store: Store<EntityCache>\n  ) {\n    this.entityActionErrors$ = entitySelectors$Factory.entityActionErrors$;\n    this.entityCache$ = entitySelectors$Factory.entityCache$;\n    this.reducedActions$ = entityDispatcherFactory.reducedActions$;\n  }\n\n  /** Observable of error EntityActions (e.g. QUERY_ALL_ERROR) for all entity types */\n  readonly entityActionErrors$: Observable<EntityAction>;\n\n  /** Observable of the entire entity cache */\n  readonly entityCache$: Observable<EntityCache> | Store<EntityCache>;\n\n  /**\n   * Actions scanned by the store after it processed them with reducers.\n   * A replay observable of the most recent action reduced by the store.\n   */\n  readonly reducedActions$: Observable<Action>;\n}\n"]}