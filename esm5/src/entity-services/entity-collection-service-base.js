// tslint:disable:member-ordering
/**
 * Base class for a concrete EntityCollectionService<T>.
 * Can be instantiated. Cannot be injected. Use EntityCollectionServiceFactory to create.
 * @param EntityCollectionServiceElements The ingredients for this service
 * as a source of supporting services for creating an EntityCollectionService<T> instance.
 */
var EntityCollectionServiceBase = /** @class */ (function () {
    function EntityCollectionServiceBase(
    /** Name of the entity type of this collection service */
    entityName, 
    /** Creates the core elements of the EntityCollectionService for this entity type */
    serviceElementsFactory) {
        this.entityName = entityName;
        entityName = entityName.trim();
        var _a = serviceElementsFactory.create(entityName), dispatcher = _a.dispatcher, selectors = _a.selectors, selectors$ = _a.selectors$;
        this.entityName = entityName;
        this.dispatcher = dispatcher;
        this.guard = dispatcher.guard;
        this.selectId = dispatcher.selectId;
        this.toUpdate = dispatcher.toUpdate;
        this.selectors = selectors;
        this.selectors$ = selectors$;
        this.collection$ = selectors$.collection$;
        this.count$ = selectors$.count$;
        this.entities$ = selectors$.entities$;
        this.entityActions$ = selectors$.entityActions$;
        this.entityMap$ = selectors$.entityMap$;
        this.errors$ = selectors$.errors$;
        this.filter$ = selectors$.filter$;
        this.filteredEntities$ = selectors$.filteredEntities$;
        this.keys$ = selectors$.keys$;
        this.loaded$ = selectors$.loaded$;
        this.loading$ = selectors$.loading$;
        this.changeState$ = selectors$.changeState$;
    }
    /**
     * Create an {EntityAction} for this entity type.
     * @param op {EntityOp} the entity operation
     * @param [data] the action data
     * @param [options] additional options
     * @returns the EntityAction
     */
    EntityCollectionServiceBase.prototype.createEntityAction = function (op, data, options) {
        return this.dispatcher.createEntityAction(op, data, options);
    };
    /**
     * Create an {EntityAction} for this entity type and
     * dispatch it immediately to the store.
     * @param op {EntityOp} the entity operation
     * @param [data] the action data
     * @param [options] additional options
     * @returns the dispatched EntityAction
     */
    EntityCollectionServiceBase.prototype.createAndDispatch = function (op, data, options) {
        return this.dispatcher.createAndDispatch(op, data, options);
    };
    /**
     * Dispatch an action of any type to the ngrx store.
     * @param action the Action
     * @returns the dispatched Action
     */
    EntityCollectionServiceBase.prototype.dispatch = function (action) {
        return this.dispatcher.dispatch(action);
    };
    Object.defineProperty(EntityCollectionServiceBase.prototype, "store", {
        /** The NgRx Store for the {EntityCache} */
        get: function () {
            return this.dispatcher.store;
        },
        enumerable: true,
        configurable: true
    });
    // region Dispatch commands
    /**
     * Dispatch action to save a new entity to remote storage.
     * @param entity entity to add, which may omit its key if pessimistic and the server creates the key;
     * must have a key if optimistic save.
     * @param [options] options that influence save and merge behavior
     * @returns Observable of the entity
     * after server reports successful save or the save error.
     */
    EntityCollectionServiceBase.prototype.add = function (entity, options) {
        return this.dispatcher.add(entity, options);
    };
    /**
     * Dispatch action to cancel the persistence operation (query or save) with the given correlationId.
     * @param correlationId The correlation id for the corresponding EntityAction
     * @param [reason] explains why canceled and by whom.
     * @param [options] options such as the tag
     */
    EntityCollectionServiceBase.prototype.cancel = function (correlationId, reason, options) {
        this.dispatcher.cancel(correlationId, reason, options);
    };
    EntityCollectionServiceBase.prototype.delete = function (arg, options) {
        return this.dispatcher.delete(arg, options);
    };
    /**
     * Dispatch action to query remote storage for all entities and
     * merge the queried entities into the cached collection.
     * @param [options] options that influence merge behavior
     * @returns Observable of the collection
     * after server reports successful query or the query error.
     * @see load()
     */
    EntityCollectionServiceBase.prototype.getAll = function (options) {
        return this.dispatcher.getAll(options);
    };
    /**
     * Dispatch action to query remote storage for the entity with this primary key.
     * If the server returns an entity,
     * merge it into the cached collection.
     * @param key The primary key of the entity to get.
     * @param [options] options that influence merge behavior
     * @returns Observable of the queried entity that is in the collection
     * after server reports success or the query error.
     */
    EntityCollectionServiceBase.prototype.getByKey = function (key, options) {
        return this.dispatcher.getByKey(key, options);
    };
    /**
     * Dispatch action to query remote storage for the entities that satisfy a query expressed
     * with either a query parameter map or an HTTP URL query string,
     * and merge the results into the cached collection.
     * @params queryParams the query in a form understood by the server
     * @param [options] options that influence merge behavior
     * @returns Observable of the queried entities
     * after server reports successful query or the query error.
     */
    EntityCollectionServiceBase.prototype.getWithQuery = function (queryParams, options) {
        return this.dispatcher.getWithQuery(queryParams, options);
    };
    /**
     * Dispatch action to query remote storage for all entities and
     * completely replace the cached collection with the queried entities.
     * @param [options] options that influence load behavior
     * @returns Observable of the collection
     * after server reports successful query or the query error.
     * @see getAll
     */
    EntityCollectionServiceBase.prototype.load = function (options) {
        return this.dispatcher.load(options);
    };
    /**
     * Dispatch action to save the updated entity (or partial entity) in remote storage.
     * The update entity may be partial (but must have its key)
     * in which case it patches the existing entity.
     * @param entity update entity, which might be a partial of T but must at least have its key.
     * @param [options] options that influence save and merge behavior
     * @returns Observable of the updated entity
     * after server reports successful save or the save error.
     */
    EntityCollectionServiceBase.prototype.update = function (entity, options) {
        return this.dispatcher.update(entity, options);
    };
    /**
     * Dispatch action to save a new or existing entity to remote storage.
     * Call only if the server supports upsert.
     * @param entity entity to add or upsert.
     * It may omit its key if an add, and is pessimistic, and the server creates the key;
     * must have a key if optimistic save.
     * @param [options] options that influence save and merge behavior
     * @returns Observable of the entity
     * after server reports successful save or the save error.
     */
    EntityCollectionServiceBase.prototype.upsert = function (entity, options) {
        return this.dispatcher.upsert(entity, options);
    };
    /*** Cache-only operations that do not update remote storage ***/
    /**
     * Replace all entities in the cached collection.
     * Does not save to remote storage.
     */
    EntityCollectionServiceBase.prototype.addAllToCache = function (entities) {
        this.dispatcher.addAllToCache(entities);
    };
    /**
     * Add a new entity directly to the cache.
     * Does not save to remote storage.
     * Ignored if an entity with the same primary key is already in cache.
     */
    EntityCollectionServiceBase.prototype.addOneToCache = function (entity) {
        this.dispatcher.addOneToCache(entity);
    };
    /**
     * Add multiple new entities directly to the cache.
     * Does not save to remote storage.
     * Entities with primary keys already in cache are ignored.
     */
    EntityCollectionServiceBase.prototype.addManyToCache = function (entities) {
        this.dispatcher.addManyToCache(entities);
    };
    /** Clear the cached entity collection */
    EntityCollectionServiceBase.prototype.clearCache = function () {
        this.dispatcher.clearCache();
    };
    EntityCollectionServiceBase.prototype.removeOneFromCache = function (arg) {
        this.dispatcher.removeOneFromCache(arg);
    };
    EntityCollectionServiceBase.prototype.removeManyFromCache = function (args) {
        this.dispatcher.removeManyFromCache(args);
    };
    /**
     * Update a cached entity directly.
     * Does not update that entity in remote storage.
     * Ignored if an entity with matching primary key is not in cache.
     * The update entity may be partial (but must have its key)
     * in which case it patches the existing entity.
     */
    EntityCollectionServiceBase.prototype.updateOneInCache = function (entity) {
        // update entity might be a partial of T but must at least have its key.
        // pass the Update<T> structure as the payload
        this.dispatcher.updateOneInCache(entity);
    };
    /**
     * Update multiple cached entities directly.
     * Does not update these entities in remote storage.
     * Entities whose primary keys are not in cache are ignored.
     * Update entities may be partial but must at least have their keys.
     * such partial entities patch their cached counterparts.
     */
    EntityCollectionServiceBase.prototype.updateManyInCache = function (entities) {
        this.dispatcher.updateManyInCache(entities);
    };
    /**
     * Add or update a new entity directly to the cache.
     * Does not save to remote storage.
     * Upsert entity might be a partial of T but must at least have its key.
     * Pass the Update<T> structure as the payload
     */
    EntityCollectionServiceBase.prototype.upsertOneInCache = function (entity) {
        this.dispatcher.upsertOneInCache(entity);
    };
    /**
     * Add or update multiple cached entities directly.
     * Does not save to remote storage.
     */
    EntityCollectionServiceBase.prototype.upsertManyInCache = function (entities) {
        this.dispatcher.upsertManyInCache(entities);
    };
    /**
     * Set the pattern that the collection's filter applies
     * when using the `filteredEntities` selector.
     */
    EntityCollectionServiceBase.prototype.setFilter = function (pattern) {
        this.dispatcher.setFilter(pattern);
    };
    /** Set the loaded flag */
    EntityCollectionServiceBase.prototype.setLoaded = function (isLoaded) {
        this.dispatcher.setLoaded(!!isLoaded);
    };
    /** Set the loading flag */
    EntityCollectionServiceBase.prototype.setLoading = function (isLoading) {
        this.dispatcher.setLoading(!!isLoading);
    };
    return EntityCollectionServiceBase;
}());
export { EntityCollectionServiceBase };
//# sourceMappingURL=data:application/json;base64,