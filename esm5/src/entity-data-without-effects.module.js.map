{"version":3,"file":"entity-data-without-effects.module.js","sourceRoot":"ng://@ngrx/data/","sources":["src/entity-data-without-effects.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ModuleWithProviders,\n  NgModule,\n  Inject,\n  Injector,\n  InjectionToken,\n  Optional,\n  OnDestroy,\n} from '@angular/core';\n\nimport {\n  Action,\n  combineReducers,\n  MetaReducer,\n  ReducerManager,\n  StoreModule,\n} from '@ngrx/store';\n\nimport { CorrelationIdGenerator } from './utils/correlation-id-generator';\nimport { EntityDispatcherDefaultOptions } from './dispatchers/entity-dispatcher-default-options';\nimport { EntityAction } from './actions/entity-action';\nimport { EntityActionFactory } from './actions/entity-action-factory';\nimport { EntityCache } from './reducers/entity-cache';\nimport { EntityCacheDispatcher } from './dispatchers/entity-cache-dispatcher';\nimport { entityCacheSelectorProvider } from './selectors/entity-cache-selector';\nimport { EntityCollectionServiceElementsFactory } from './entity-services/entity-collection-service-elements-factory';\nimport { EntityCollectionServiceFactory } from './entity-services/entity-collection-service-factory';\nimport { EntityServices } from './entity-services/entity-services';\nimport { EntityCollection } from './reducers/entity-collection';\nimport { EntityCollectionCreator } from './reducers/entity-collection-creator';\nimport { EntityCollectionReducerFactory } from './reducers/entity-collection-reducer';\nimport { EntityCollectionReducerMethodsFactory } from './reducers/entity-collection-reducer-methods';\nimport { EntityCollectionReducerRegistry } from './reducers/entity-collection-reducer-registry';\nimport { EntityDispatcherFactory } from './dispatchers/entity-dispatcher-factory';\nimport { EntityDefinitionService } from './entity-metadata/entity-definition.service';\nimport { EntityMetadataMap } from './entity-metadata/entity-metadata';\nimport { EntityCacheReducerFactory } from './reducers/entity-cache-reducer';\nimport {\n  ENTITY_CACHE_NAME,\n  ENTITY_CACHE_NAME_TOKEN,\n  ENTITY_CACHE_META_REDUCERS,\n  ENTITY_COLLECTION_META_REDUCERS,\n  INITIAL_ENTITY_CACHE_STATE,\n} from './reducers/constants';\n\nimport { DefaultLogger } from './utils/default-logger';\nimport { EntitySelectorsFactory } from './selectors/entity-selectors';\nimport { EntitySelectors$Factory } from './selectors/entity-selectors$';\nimport { EntityServicesBase } from './entity-services/entity-services-base';\nimport { EntityServicesElements } from './entity-services/entity-services-elements';\nimport { Logger, PLURAL_NAMES_TOKEN } from './utils/interfaces';\n\nexport interface EntityDataModuleConfig {\n  entityMetadata?: EntityMetadataMap;\n  entityCacheMetaReducers?: (\n    | MetaReducer<EntityCache, Action>\n    | InjectionToken<MetaReducer<EntityCache, Action>>)[];\n  entityCollectionMetaReducers?: MetaReducer<EntityCollection, EntityAction>[];\n  // Initial EntityCache state or a function that returns that state\n  initialEntityCacheState?: EntityCache | (() => EntityCache);\n  pluralNames?: { [name: string]: string };\n}\n\n/**\n * Module without effects or dataservices which means no HTTP calls\n * This module helpful for internal testing.\n * Also helpful for apps that handle server access on their own and\n * therefore opt-out of @ngrx/effects for entities\n */\n@NgModule({\n  imports: [\n    StoreModule, // rely on Store feature providers rather than Store.forFeature()\n  ],\n  providers: [\n    CorrelationIdGenerator,\n    EntityDispatcherDefaultOptions,\n    EntityActionFactory,\n    EntityCacheDispatcher,\n    EntityCacheReducerFactory,\n    entityCacheSelectorProvider,\n    EntityCollectionCreator,\n    EntityCollectionReducerFactory,\n    EntityCollectionReducerMethodsFactory,\n    EntityCollectionReducerRegistry,\n    EntityCollectionServiceElementsFactory,\n    EntityCollectionServiceFactory,\n    EntityDefinitionService,\n    EntityDispatcherFactory,\n    EntitySelectorsFactory,\n    EntitySelectors$Factory,\n    EntityServicesElements,\n    { provide: ENTITY_CACHE_NAME_TOKEN, useValue: ENTITY_CACHE_NAME },\n    { provide: EntityServices, useClass: EntityServicesBase },\n    { provide: Logger, useClass: DefaultLogger },\n  ],\n})\nexport class EntityDataModuleWithoutEffects implements OnDestroy {\n  private entityCacheFeature: any;\n\n  static forRoot(\n    config: EntityDataModuleConfig\n  ): ModuleWithProviders<EntityDataModuleWithoutEffects> {\n    return {\n      ngModule: EntityDataModuleWithoutEffects,\n      providers: [\n        {\n          provide: ENTITY_CACHE_META_REDUCERS,\n          useValue: config.entityCacheMetaReducers\n            ? config.entityCacheMetaReducers\n            : [],\n        },\n        {\n          provide: ENTITY_COLLECTION_META_REDUCERS,\n          useValue: config.entityCollectionMetaReducers\n            ? config.entityCollectionMetaReducers\n            : [],\n        },\n        {\n          provide: PLURAL_NAMES_TOKEN,\n          multi: true,\n          useValue: config.pluralNames ? config.pluralNames : {},\n        },\n      ],\n    };\n  }\n\n  constructor(\n    private reducerManager: ReducerManager,\n    entityCacheReducerFactory: EntityCacheReducerFactory,\n    private injector: Injector,\n    // optional params\n    @Optional()\n    @Inject(ENTITY_CACHE_NAME_TOKEN)\n    private entityCacheName: string,\n    @Optional()\n    @Inject(INITIAL_ENTITY_CACHE_STATE)\n    private initialState: any,\n    @Optional()\n    @Inject(ENTITY_CACHE_META_REDUCERS)\n    private metaReducers: (\n      | MetaReducer<EntityCache, Action>\n      | InjectionToken<MetaReducer<EntityCache, Action>>)[]\n  ) {\n    // Add the @ngrx/data feature to the Store's features\n    // as Store.forFeature does for StoreFeatureModule\n    const key = entityCacheName || ENTITY_CACHE_NAME;\n\n    initialState =\n      typeof initialState === 'function' ? initialState() : initialState;\n\n    const reducers: MetaReducer<EntityCache, Action>[] = (\n      metaReducers || []\n    ).map(mr => {\n      return mr instanceof InjectionToken ? injector.get(mr) : mr;\n    });\n\n    this.entityCacheFeature = {\n      key,\n      reducers: entityCacheReducerFactory.create(),\n      reducerFactory: combineReducers,\n      initialState: initialState || {},\n      metaReducers: reducers,\n    };\n    reducerManager.addFeature(this.entityCacheFeature);\n  }\n\n  ngOnDestroy() {\n    this.reducerManager.removeFeature(this.entityCacheFeature);\n  }\n}\n"]}