{"version":3,"file":"entity-cache-action.js","sourceRoot":"ng://@ngrx/data/","sources":["src/actions/entity-cache-action.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Actions dedicated to the EntityCache as a whole\n */\nimport { Action } from '@ngrx/store';\n\nimport { ChangeSet, ChangeSetOperation } from './entity-cache-change-set';\nexport { ChangeSet, ChangeSetOperation } from './entity-cache-change-set';\n\nimport { DataServiceError } from '../dataservices/data-service-error';\nimport { EntityActionOptions } from '../actions/entity-action';\nimport { EntityCache } from '../reducers/entity-cache';\nimport { MergeStrategy } from '../actions/merge-strategy';\n\nexport enum EntityCacheAction {\n  CLEAR_COLLECTIONS = '@ngrx/data/entity-cache/clear-collections',\n  LOAD_COLLECTIONS = '@ngrx/data/entity-cache/load-collections',\n  MERGE_QUERY_SET = '@ngrx/data/entity-cache/merge-query-set',\n  SET_ENTITY_CACHE = '@ngrx/data/entity-cache/set-cache',\n\n  SAVE_ENTITIES = '@ngrx/data/entity-cache/save-entities',\n  SAVE_ENTITIES_CANCEL = '@ngrx/data/entity-cache/save-entities-cancel',\n  SAVE_ENTITIES_CANCELED = '@ngrx/data/entity-cache/save-entities-canceled',\n  SAVE_ENTITIES_ERROR = '@ngrx/data/entity-cache/save-entities-error',\n  SAVE_ENTITIES_SUCCESS = '@ngrx/data/entity-cache/save-entities-success',\n}\n\n/**\n * Hash of entities keyed by EntityCollection name,\n * typically the result of a query that returned results from a multi-collection query\n * that will be merged into an EntityCache via the `MergeQuerySet` action.\n */\nexport interface EntityCacheQuerySet {\n  [entityName: string]: any[];\n}\n\n/**\n * Clear the collections identified in the collectionSet.\n * @param [collections] Array of names of the collections to clear.\n * If empty array, does nothing. If no array, clear all collections.\n * @param [tag] Optional tag to identify the operation from the app perspective.\n */\nexport class ClearCollections implements Action {\n  readonly payload: { collections?: string[]; tag?: string };\n  readonly type = EntityCacheAction.CLEAR_COLLECTIONS;\n\n  constructor(collections?: string[], tag?: string) {\n    this.payload = { collections, tag };\n  }\n}\n\n/**\n * Create entity cache action that loads multiple entity collections at the same time.\n * before any selectors$ observables emit.\n * @param querySet The collections to load, typically the result of a query.\n * @param [tag] Optional tag to identify the operation from the app perspective.\n * in the form of a map of entity collections.\n */\nexport class LoadCollections implements Action {\n  readonly payload: { collections: EntityCacheQuerySet; tag?: string };\n  readonly type = EntityCacheAction.LOAD_COLLECTIONS;\n\n  constructor(collections: EntityCacheQuerySet, tag?: string) {\n    this.payload = { collections, tag };\n  }\n}\n\n/**\n * Create entity cache action that merges entities from a query result\n * that returned entities from multiple collections.\n * Corresponding entity cache reducer should add and update all collections\n * at the same time, before any selectors$ observables emit.\n * @param querySet The result of the query in the form of a map of entity collections.\n * These are the entity data to merge into the respective collections.\n * @param mergeStrategy How to merge a queried entity when it is already in the collection.\n * The default is MergeStrategy.PreserveChanges\n * @param [tag] Optional tag to identify the operation from the app perspective.\n */\nexport class MergeQuerySet implements Action {\n  readonly payload: {\n    querySet: EntityCacheQuerySet;\n    mergeStrategy?: MergeStrategy;\n    tag?: string;\n  };\n\n  readonly type = EntityCacheAction.MERGE_QUERY_SET;\n\n  constructor(\n    querySet: EntityCacheQuerySet,\n    mergeStrategy?: MergeStrategy,\n    tag?: string\n  ) {\n    this.payload = {\n      querySet,\n      mergeStrategy:\n        mergeStrategy === null ? MergeStrategy.PreserveChanges : mergeStrategy,\n      tag,\n    };\n  }\n}\n\n/**\n * Create entity cache action for replacing the entire entity cache.\n * Dangerous because brute force but useful as when re-hydrating an EntityCache\n * from local browser storage when the application launches.\n * @param cache New state of the entity cache\n * @param [tag] Optional tag to identify the operation from the app perspective.\n */\nexport class SetEntityCache implements Action {\n  readonly payload: { cache: EntityCache; tag?: string };\n  readonly type = EntityCacheAction.SET_ENTITY_CACHE;\n\n  constructor(public readonly cache: EntityCache, tag?: string) {\n    this.payload = { cache, tag };\n  }\n}\n\n// #region SaveEntities\nexport class SaveEntities implements Action {\n  readonly payload: {\n    readonly changeSet: ChangeSet;\n    readonly url: string;\n    readonly correlationId?: any;\n    readonly isOptimistic?: boolean;\n    readonly mergeStrategy?: MergeStrategy;\n    readonly tag?: string;\n    error?: Error;\n    skip?: boolean; // not used\n  };\n  readonly type = EntityCacheAction.SAVE_ENTITIES;\n\n  constructor(\n    changeSet: ChangeSet,\n    url: string,\n    options?: EntityActionOptions\n  ) {\n    options = options || {};\n    if (changeSet) {\n      changeSet.tag = changeSet.tag || options.tag;\n    }\n    this.payload = { changeSet, url, ...options, tag: changeSet.tag };\n  }\n}\n\nexport class SaveEntitiesCancel implements Action {\n  readonly payload: {\n    readonly correlationId: any;\n    readonly reason?: string;\n    readonly entityNames?: string[];\n    readonly tag?: string;\n  };\n  readonly type = EntityCacheAction.SAVE_ENTITIES_CANCEL;\n\n  constructor(\n    correlationId: any,\n    reason?: string,\n    entityNames?: string[],\n    tag?: string\n  ) {\n    this.payload = { correlationId, reason, entityNames, tag };\n  }\n}\n\nexport class SaveEntitiesCanceled implements Action {\n  readonly payload: {\n    readonly correlationId: any;\n    readonly reason?: string;\n    readonly tag?: string;\n  };\n  readonly type = EntityCacheAction.SAVE_ENTITIES_CANCEL;\n\n  constructor(correlationId: any, reason?: string, tag?: string) {\n    this.payload = { correlationId, reason, tag };\n  }\n}\n\nexport class SaveEntitiesError {\n  readonly payload: {\n    readonly error: DataServiceError;\n    readonly originalAction: SaveEntities;\n    readonly correlationId: any;\n  };\n  readonly type = EntityCacheAction.SAVE_ENTITIES_ERROR;\n  constructor(error: DataServiceError, originalAction: SaveEntities) {\n    const correlationId = originalAction.payload.correlationId;\n    this.payload = { error, originalAction, correlationId };\n  }\n}\n\nexport class SaveEntitiesSuccess implements Action {\n  readonly payload: {\n    readonly changeSet: ChangeSet;\n    readonly url: string;\n    readonly correlationId?: any;\n    readonly isOptimistic?: boolean;\n    readonly mergeStrategy?: MergeStrategy;\n    readonly tag?: string;\n    error?: Error;\n    skip?: boolean; // not used\n  };\n  readonly type = EntityCacheAction.SAVE_ENTITIES_SUCCESS;\n\n  constructor(\n    changeSet: ChangeSet,\n    url: string,\n    options?: EntityActionOptions\n  ) {\n    options = options || {};\n    if (changeSet) {\n      changeSet.tag = changeSet.tag || options.tag;\n    }\n    this.payload = { changeSet, url, ...options, tag: changeSet.tag };\n  }\n}\n// #endregion SaveEntities\n"]}