{"version":3,"file":"entity-cache-change-set.js","sourceRoot":"ng://@ngrx/data/","sources":["src/actions/entity-cache-change-set.ts"],"names":[],"mappings":"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","sourcesContent":["import { Update } from '@ngrx/entity';\n\nexport enum ChangeSetOperation {\n  Add = 'Add',\n  Delete = 'Delete',\n  Update = 'Update',\n  Upsert = 'Upsert',\n}\nexport interface ChangeSetAdd<T = any> {\n  op: ChangeSetOperation.Add;\n  entityName: string;\n  entities: T[];\n}\n\nexport interface ChangeSetDelete {\n  op: ChangeSetOperation.Delete;\n  entityName: string;\n  entities: string[] | number[];\n}\n\nexport interface ChangeSetUpdate<T = any> {\n  op: ChangeSetOperation.Update;\n  entityName: string;\n  entities: Update<T>[];\n}\n\nexport interface ChangeSetUpsert<T = any> {\n  op: ChangeSetOperation.Upsert;\n  entityName: string;\n  entities: T[];\n}\n\n/**\n * A entities of a single entity type, which are changed in the same way by a ChangeSetOperation\n */\nexport type ChangeSetItem =\n  | ChangeSetAdd\n  | ChangeSetDelete\n  | ChangeSetUpdate\n  | ChangeSetUpsert;\n\n/*\n * A set of entity Changes, typically to be saved.\n */\nexport interface ChangeSet<T = any> {\n  /** An array of ChangeSetItems to be processed in the array order */\n  changes: ChangeSetItem[];\n\n  /**\n   * An arbitrary, serializable object that should travel with the ChangeSet.\n   * Meaningful to the ChangeSet producer and consumer. Ignored by @ngrx/data.\n   */\n  extras?: T;\n\n  /** An arbitrary string, identifying the ChangeSet and perhaps its purpose */\n  tag?: string;\n}\n\n/**\n * Factory to create a ChangeSetItem for a ChangeSetOperation\n */\nexport class ChangeSetItemFactory {\n  /** Create the ChangeSetAdd for new entities of the given entity type */\n  add<T>(entityName: string, entities: T | T[]): ChangeSetAdd<T> {\n    entities = Array.isArray(entities) ? entities : entities ? [entities] : [];\n    return { entityName, op: ChangeSetOperation.Add, entities };\n  }\n\n  /** Create the ChangeSetDelete for primary keys of the given entity type */\n  delete(\n    entityName: string,\n    keys: number | number[] | string | string[]\n  ): ChangeSetDelete {\n    const ids = Array.isArray(keys)\n      ? keys\n      : keys\n        ? ([keys] as string[] | number[])\n        : [];\n    return { entityName, op: ChangeSetOperation.Delete, entities: ids };\n  }\n\n  /** Create the ChangeSetUpdate for Updates of entities of the given entity type */\n  update<T extends { id: string | number }>(\n    entityName: string,\n    updates: Update<T> | Update<T>[]\n  ): ChangeSetUpdate<T> {\n    updates = Array.isArray(updates) ? updates : updates ? [updates] : [];\n    return { entityName, op: ChangeSetOperation.Update, entities: updates };\n  }\n\n  /** Create the ChangeSetUpsert for new or existing entities of the given entity type */\n  upsert<T>(entityName: string, entities: T | T[]): ChangeSetUpsert<T> {\n    entities = Array.isArray(entities) ? entities : entities ? [entities] : [];\n    return { entityName, op: ChangeSetOperation.Upsert, entities };\n  }\n}\n\n/**\n * Instance of a factory to create a ChangeSetItem for a ChangeSetOperation\n */\nexport const changeSetItemFactory = new ChangeSetItemFactory();\n\n/**\n * Return ChangeSet after filtering out null and empty ChangeSetItems.\n * @param changeSet ChangeSet with changes to filter\n */\nexport function excludeEmptyChangeSetItems(changeSet: ChangeSet): ChangeSet {\n  changeSet = changeSet && changeSet.changes ? changeSet : { changes: [] };\n  const changes = changeSet.changes.filter(\n    c => c != null && c.entities && c.entities.length > 0\n  );\n  return { ...changeSet, changes };\n}\n"]}