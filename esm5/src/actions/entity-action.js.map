{"version":3,"file":"entity-action.js","sourceRoot":"ng://@ngrx/data/","sources":["src/actions/entity-action.ts"],"names":[],"mappings":";;;;;;;;;;AAMA,kCAGC;;;IAFC,4BAAsB;;IACtB,+BAAyC;;;;;;AAI3C,yCAwBC;;;;;;IAtBC,4CAA6B;;;;;IAE7B,2CAAgC;;IAChC,4CAAuC;;;;;IAEvC,kCAAsB;;;;;;IAUtB,oCAAc;;;;;;IAMd,mCAAe;;;;;;;AAIjB,yCAIC;;;IAHC,yCAA4B;;IAC5B,uCAA4B;;IAC5B,mCAAkB","sourcesContent":["import { Action } from '@ngrx/store';\n\nimport { EntityOp } from './entity-op';\nimport { MergeStrategy } from './merge-strategy';\n\n/** Action concerning an entity collection. */\nexport interface EntityAction<P = any> extends Action {\n  readonly type: string;\n  readonly payload: EntityActionPayload<P>;\n}\n\n/** Options of an EntityAction */\nexport interface EntityActionOptions {\n  /** Correlate related EntityActions, particularly related saves. Must be serializable. */\n  readonly correlationId?: any;\n  /** True if should perform action optimistically (before server responds) */\n  readonly isOptimistic?: boolean;\n  readonly mergeStrategy?: MergeStrategy;\n  /** The tag to use in the action's type. The entityName if no tag specified. */\n  readonly tag?: string;\n\n  // Mutable actions are BAD.\n  // Unfortunately, these mutations are the only way to stop @ngrx/effects\n  // from processing these actions.\n\n  /**\n   * The action was determined (usually by a reducer) to be in error.\n   * Downstream effects should not process but rather treat it as an error.\n   */\n  error?: Error;\n\n  /**\n   * Downstream effects should skip processing this action but should return\n   * an innocuous Observable<Action> of success.\n   */\n  skip?: boolean;\n}\n\n/** Payload of an EntityAction */\nexport interface EntityActionPayload<P = any> extends EntityActionOptions {\n  readonly entityName: string;\n  readonly entityOp: EntityOp;\n  readonly data?: P;\n}\n"]}