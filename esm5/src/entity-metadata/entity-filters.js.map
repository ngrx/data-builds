{"version":3,"file":"entity-filters.js","sourceRoot":"ng://@ngrx/data/","sources":["src/entity-metadata/entity-filters.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAYA,MAAM,UAAU,oBAAoB,CAClC,KAAuB;IAAvB,sBAAA,EAAA,UAAuB;IAEvB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,4DAA4D;QAC5D;;;;;QAAO,UAAC,QAAa,EAAE,OAAe,IAAK,OAAA,QAAQ,EAAR,CAAQ,EAAC;KACrD;IAED;;;;;IAAO,UAAC,QAAa,EAAE,OAAwB;QAC7C,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,EAAE,CAAC;SACX;;YAEK,MAAM,GACV,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO;QAClE,IAAI,MAAM,EAAE;;gBACJ,SAAS;;;;YAAG,UAAC,CAAM,IAAK,OAAA,KAAK,CAAC,IAAI;;;;YAAC,UAAA,IAAI,IAAI,OAAA,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAApB,CAAoB,EAAC,EAAxC,CAAwC,CAAA;YACtE,OAAO,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;SACnC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC,EAAC;AACJ,CAAC","sourcesContent":["/**\n * Filters the `entities` array argument and returns the original `entities`,\n * or a new filtered array of entities.\n * NEVER mutate the original `entities` array itself.\n **/\nexport type EntityFilterFn<T> = (entities: T[], pattern?: any) => T[];\n\n/**\n * Creates an {EntityFilterFn} that matches RegExp or RegExp string pattern\n * anywhere in any of the given props of an entity.\n * If pattern is a string, spaces are significant and ignores case.\n */\nexport function PropsFilterFnFactory<T = any>(\n  props: (keyof T)[] = []\n): EntityFilterFn<T> {\n  if (props.length === 0) {\n    // No properties -> nothing could match -> return unfiltered\n    return (entities: T[], pattern: string) => entities;\n  }\n\n  return (entities: T[], pattern: string | RegExp) => {\n    if (!entities) {\n      return [];\n    }\n\n    const regExp =\n      typeof pattern === 'string' ? new RegExp(pattern, 'i') : pattern;\n    if (regExp) {\n      const predicate = (e: any) => props.some(prop => regExp.test(e[prop]));\n      return entities.filter(predicate);\n    }\n    return entities;\n  };\n}\n"]}