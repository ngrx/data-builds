{"version":3,"file":"entity-effects.js","sourceRoot":"ng://@ngrx/data/","sources":["src/effects/entity-effects.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAE7D,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAGtD,OAAO,EAAE,cAAc,EAAc,EAAE,EAAE,IAAI,EAAiB,MAAM,MAAM,CAAC;AAC3E,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAG1E,OAAO,EAAE,mBAAmB,EAAE,MAAM,kCAAkC,CAAC;AACvE,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AACtE,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAC/D,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAGhE,OAAO,EAAE,iBAAiB,EAAE,MAAM,qCAAqC,CAAC;AACxE,OAAO,EAAE,wBAAwB,EAAE,MAAM,oDAAoD,CAAC;;AAE9F,MAAM,KAAO,UAAU,GAAe;IACpC,QAAQ,CAAC,SAAS;IAClB,QAAQ,CAAC,UAAU;IACnB,QAAQ,CAAC,YAAY;IACrB,QAAQ,CAAC,UAAU;IACnB,QAAQ,CAAC,YAAY;IACrB,QAAQ,CAAC,eAAe;IACxB,QAAQ,CAAC,eAAe;IACxB,QAAQ,CAAC,eAAe;CACzB;AAED;IA2BE,uBACU,OAA8B,EAC9B,WAA8B,EAC9B,mBAAwC,EACxC,aAAuC,EAQvC,SAAwB;QAZlC,iBAaI;QAZM,YAAO,GAAP,OAAO,CAAuB;QAC9B,gBAAW,GAAX,WAAW,CAAmB;QAC9B,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,kBAAa,GAAb,aAAa,CAA0B;QAQvC,cAAS,GAAT,SAAS,CAAe;;;;;QAnC1B,kBAAa,GAAG,EAAE,CAAC;;;;QAK3B,YAAO,GAAoB,YAAY;;;QACrC;YACE,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CACf,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,EACnC,GAAG;;;;YAAC,UAAC,MAAoB,IAAK,OAAA,MAAM,CAAC,OAAO,CAAC,aAAa,EAA5B,CAA4B,EAAC,EAC3D,MAAM;;;;YAAC,UAAA,EAAE,IAAI,OAAA,EAAE,IAAI,IAAI,EAAV,CAAU,EAAC,CACzB;QAJD,CAIC,GACH,EAAE,QAAQ,EAAE,KAAK,EAAE,CACpB,CAAC;;QAGF,aAAQ,GAAuB,YAAY;;;QAAC;YAC1C,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CACf,UAAU,CAAC,UAAU,CAAC,EACtB,QAAQ;;;;YAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAApB,CAAoB,EAAC,CACzC;QAHD,CAGC,EACF,CAAC;IAeC,CAAC;IAEJ;;;;OAIG;;;;;;;IACH,+BAAO;;;;;;IAAP,UAAQ,MAAoB;QAA5B,iBA+BC;QA9BC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE;YACvB,4CAA4C;YAC5C,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;SACxC;QACD,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE;YACxB,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SACxD;QACD,IAAI;;;;gBAGI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CACzB,MAAM;;;;YAAC,UAAA,EAAE,IAAI,OAAA,MAAM,CAAC,OAAO,CAAC,aAAa,KAAK,EAAE,EAAnC,CAAmC,EAAC,EACjD,GAAG;;;;YAAC,UAAA,EAAE;gBACJ,OAAA,KAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,MAAM,EAAE;oBAChD,QAAQ,EAAE,QAAQ,CAAC,gBAAgB;iBACpC,CAAC;YAFF,CAEE,EACH,CACF;;;gBAGK,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CACzC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAC7C,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CACtC;YAED,wEAAwE;YACxE,OAAO,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACnB;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;SACvC;IACH,CAAC;;;;;;IAEO,uCAAe;;;;;IAAvB,UAAwB,MAAoB;QACpC,IAAA,mBAA+C,EAA7C,0BAAU,EAAE,sBAAQ,EAAE,cAAuB;;YAC/C,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,UAAU,CAAC;QACvD,QAAQ,QAAQ,EAAE;YAChB,KAAK,QAAQ,CAAC,SAAS,CAAC;YACxB,KAAK,QAAQ,CAAC,UAAU;gBACtB,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;YAE1B,KAAK,QAAQ,CAAC,YAAY;gBACxB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAE/B,KAAK,QAAQ,CAAC,UAAU;gBACtB,OAAO,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAEpC,KAAK,QAAQ,CAAC,YAAY;gBACxB,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAE3B,KAAK,QAAQ,CAAC,eAAe;gBAC3B,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAE9B,KAAK,QAAQ,CAAC,eAAe;gBACrB,IAAA,8BAAqC,EAAnC,YAAE,EAAE,sBAA+B;gBAC3C,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAC9B,GAAG;;;;gBAAC,UAAC,aAAkB;;;;;;;;wBAOf,OAAO,GACX,aAAa,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC;;wBAClD,YAAY,GAA4B,OAAO;wBACnD,CAAC,CAAC,EAAE,EAAE,MAAA,EAAE,OAAO,wBAAO,SAAO,GAAK,aAAa,CAAE,EAAE,OAAO,EAAE,IAAI,EAAE;wBAClE,CAAC,CAAC,EAAE,EAAE,MAAA,EAAE,OAAO,WAAA,EAAE,OAAO,EAAE,KAAK,EAAE;oBACnC,OAAO,YAAY,CAAC;gBACtB,CAAC,EAAC,CACH,CAAC;YAEJ,KAAK,QAAQ,CAAC,eAAe;gBAC3B,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAC9B,GAAG;;;;gBAAC,UAAC,cAAmB;;wBAChB,OAAO,GACX,cAAc,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,GAAG,CAAC;oBAC1D,OAAO,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,kCAAkC;gBAC5E,CAAC,EAAC,CACH,CAAC;YACJ;gBACE,MAAM,IAAI,KAAK,CAAC,0BAAuB,QAAQ,2BAAuB,CAAC,CAAC;SAC3E;IACH,CAAC;IAED;;;OAGG;;;;;;;;IACK,oCAAY;;;;;;;IAApB,UACE,MAAoB;QADtB,iBAUC;QAPC,yCAAyC;QACzC,qCAAqC;QACrC,+CAA+C;QAC/C;;;;QAAO,UAAC,KAAY;YAClB,OAAA,EAAE,CAAC,KAAI,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CACpD,KAAK,CAAC,KAAI,CAAC,aAAa,EAAE,KAAI,CAAC,SAAS,IAAI,cAAc,CAAC,CAC5D;QAFD,CAEC,EAAC;IACN,CAAC;IAED;;;OAGG;;;;;;;;IACK,0CAAkB;;;;;;;IAA1B,UACE,cAA4B;;YAEtB,SAAS,GAAG,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC;;YAC1D,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAC7D,cAAc,EACd;YACE,QAAQ,EAAE,SAAS;SACpB,CACF;QACD,gCAAgC;QAChC,yDAAyD;QACzD,+CAA+C;QAC/C,OAAO,EAAE,CAAC,aAAa,CAAC,CAAC,IAAI,CAC3B,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,IAAI,cAAc,CAAC,CAC5D,CAAC;IACJ,CAAC;;gBAxKF,UAAU;;;;gBA3BF,OAAO;gBAaP,iBAAiB;gBANjB,mBAAmB;gBAOnB,wBAAwB;gDAkD5B,QAAQ,YACR,MAAM,SAAC,wBAAwB;;IAmIpC,oBAAC;CAAA,AAzKD,IAyKC;SAxKY,aAAa;;;;;;;IAGxB,sCAA2B;;;;;IAK3B,gCAQE;;IAGF,iCAKE;;;;;IAGA,gCAAsC;;;;;IACtC,oCAAsC;;;;;IACtC,4CAAgD;;;;;IAChD,sCAA+C;;;;;;;;IAM/C,kCAEgC","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Actions, createEffect } from '@ngrx/effects';\nimport { Update } from '@ngrx/entity';\n\nimport { asyncScheduler, Observable, of, race, SchedulerLike } from 'rxjs';\nimport { catchError, delay, filter, map, mergeMap } from 'rxjs/operators';\n\nimport { EntityAction } from '../actions/entity-action';\nimport { EntityActionFactory } from '../actions/entity-action-factory';\nimport { ENTITY_EFFECTS_SCHEDULER } from './entity-effects-scheduler';\nimport { EntityOp, makeSuccessOp } from '../actions/entity-op';\nimport { ofEntityOp } from '../actions/entity-action-operators';\nimport { UpdateResponseData } from '../actions/update-response-data';\n\nimport { EntityDataService } from '../dataservices/entity-data.service';\nimport { PersistenceResultHandler } from '../dataservices/persistence-result-handler.service';\n\nexport const persistOps: EntityOp[] = [\n  EntityOp.QUERY_ALL,\n  EntityOp.QUERY_LOAD,\n  EntityOp.QUERY_BY_KEY,\n  EntityOp.QUERY_MANY,\n  EntityOp.SAVE_ADD_ONE,\n  EntityOp.SAVE_DELETE_ONE,\n  EntityOp.SAVE_UPDATE_ONE,\n  EntityOp.SAVE_UPSERT_ONE,\n];\n\n@Injectable()\nexport class EntityEffects {\n  // See https://github.com/ReactiveX/rxjs/blob/master/doc/marble-testing.md\n  /** Delay for error and skip observables. Must be multiple of 10 for marble testing. */\n  private responseDelay = 10;\n\n  /**\n   * Observable of non-null cancellation correlation ids from CANCEL_PERSIST actions\n   */\n  cancel$: Observable<any> = createEffect(\n    () =>\n      this.actions.pipe(\n        ofEntityOp(EntityOp.CANCEL_PERSIST),\n        map((action: EntityAction) => action.payload.correlationId),\n        filter(id => id != null)\n      ),\n    { dispatch: false }\n  );\n\n  // `mergeMap` allows for concurrent requests which may return in any order\n  persist$: Observable<Action> = createEffect(() =>\n    this.actions.pipe(\n      ofEntityOp(persistOps),\n      mergeMap(action => this.persist(action))\n    )\n  );\n\n  constructor(\n    private actions: Actions<EntityAction>,\n    private dataService: EntityDataService,\n    private entityActionFactory: EntityActionFactory,\n    private resultHandler: PersistenceResultHandler,\n    /**\n     * Injecting an optional Scheduler that will be undefined\n     * in normal application usage, but its injected here so that you can mock out\n     * during testing using the RxJS TestScheduler for simulating passages of time.\n     */\n    @Optional()\n    @Inject(ENTITY_EFFECTS_SCHEDULER)\n    private scheduler: SchedulerLike\n  ) {}\n\n  /**\n   * Perform the requested persistence operation and return a scalar Observable<Action>\n   * that the effect should dispatch to the store after the server responds.\n   * @param action A persistence operation EntityAction\n   */\n  persist(action: EntityAction): Observable<Action> {\n    if (action.payload.skip) {\n      // Should not persist. Pretend it succeeded.\n      return this.handleSkipSuccess$(action);\n    }\n    if (action.payload.error) {\n      return this.handleError$(action)(action.payload.error);\n    }\n    try {\n      // Cancellation: returns Observable of CANCELED_PERSIST for a persistence EntityAction\n      // whose correlationId matches cancellation correlationId\n      const c = this.cancel$.pipe(\n        filter(id => action.payload.correlationId === id),\n        map(id =>\n          this.entityActionFactory.createFromAction(action, {\n            entityOp: EntityOp.CANCELED_PERSIST,\n          })\n        )\n      );\n\n      // Data: entity collection DataService result as a successful persistence EntityAction\n      const d = this.callDataService(action).pipe(\n        map(this.resultHandler.handleSuccess(action)),\n        catchError(this.handleError$(action))\n      );\n\n      // Emit which ever gets there first; the other observable is terminated.\n      return race(c, d);\n    } catch (err) {\n      return this.handleError$(action)(err);\n    }\n  }\n\n  private callDataService(action: EntityAction) {\n    const { entityName, entityOp, data } = action.payload;\n    const service = this.dataService.getService(entityName);\n    switch (entityOp) {\n      case EntityOp.QUERY_ALL:\n      case EntityOp.QUERY_LOAD:\n        return service.getAll();\n\n      case EntityOp.QUERY_BY_KEY:\n        return service.getById(data);\n\n      case EntityOp.QUERY_MANY:\n        return service.getWithQuery(data);\n\n      case EntityOp.SAVE_ADD_ONE:\n        return service.add(data);\n\n      case EntityOp.SAVE_DELETE_ONE:\n        return service.delete(data);\n\n      case EntityOp.SAVE_UPDATE_ONE:\n        const { id, changes } = data as Update<any>; // data must be Update<T>\n        return service.update(data).pipe(\n          map((updatedEntity: any) => {\n            // Return an Update<T> with updated entity data.\n            // If server returned entity data, merge with the changes that were sent\n            // and set the 'changed' flag to true.\n            // If server did not return entity data,\n            // assume it made no additional changes of its own, return the original changes,\n            // and set the `changed` flag to `false`.\n            const hasData =\n              updatedEntity && Object.keys(updatedEntity).length > 0;\n            const responseData: UpdateResponseData<any> = hasData\n              ? { id, changes: { ...changes, ...updatedEntity }, changed: true }\n              : { id, changes, changed: false };\n            return responseData;\n          })\n        );\n\n      case EntityOp.SAVE_UPSERT_ONE:\n        return service.upsert(data).pipe(\n          map((upsertedEntity: any) => {\n            const hasData =\n              upsertedEntity && Object.keys(upsertedEntity).length > 0;\n            return hasData ? upsertedEntity : data; // ensure a returned entity value.\n          })\n        );\n      default:\n        throw new Error(`Persistence action \"${entityOp}\" is not implemented.`);\n    }\n  }\n\n  /**\n   * Handle error result of persistence operation on an EntityAction,\n   * returning a scalar observable of error action\n   */\n  private handleError$(\n    action: EntityAction\n  ): (error: Error) => Observable<EntityAction> {\n    // Although error may return immediately,\n    // ensure observable takes some time,\n    // as app likely assumes asynchronous response.\n    return (error: Error) =>\n      of(this.resultHandler.handleError(action)(error)).pipe(\n        delay(this.responseDelay, this.scheduler || asyncScheduler)\n      );\n  }\n\n  /**\n   * Because EntityAction.payload.skip is true, skip the persistence step and\n   * return a scalar success action that looks like the operation succeeded.\n   */\n  private handleSkipSuccess$(\n    originalAction: EntityAction\n  ): Observable<EntityAction> {\n    const successOp = makeSuccessOp(originalAction.payload.entityOp);\n    const successAction = this.entityActionFactory.createFromAction(\n      originalAction,\n      {\n        entityOp: successOp,\n      }\n    );\n    // Although returns immediately,\n    // ensure observable takes one tick (by using a promise),\n    // as app likely assumes asynchronous response.\n    return of(successAction).pipe(\n      delay(this.responseDelay, this.scheduler || asyncScheduler)\n    );\n  }\n}\n"]}