{"version":3,"file":"entity-selectors.js","sourceRoot":"ng://@ngrx/data/","sources":["src/selectors/entity-selectors.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\n\n// Prod build requires `MemoizedSelector even though not used.\nimport { MemoizedSelector } from '@ngrx/store';\nimport { createSelector, Selector } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity';\n\nimport { EntityCache } from '../reducers/entity-cache';\nimport {\n  ENTITY_CACHE_SELECTOR_TOKEN,\n  EntityCacheSelector,\n  createEntityCacheSelector,\n} from './entity-cache-selector';\nimport { ENTITY_CACHE_NAME } from '../reducers/constants';\nimport {\n  EntityCollection,\n  ChangeStateMap,\n} from '../reducers/entity-collection';\nimport { EntityCollectionCreator } from '../reducers/entity-collection-creator';\nimport { EntityMetadata } from '../entity-metadata/entity-metadata';\n\n/**\n * The selector functions for entity collection members,\n * Selects from the entity collection to the collection member\n * Contrast with {EntitySelectors}.\n */\nexport interface CollectionSelectors<T> {\n  readonly [selector: string]: any;\n\n  /** Count of entities in the cached collection. */\n  readonly selectCount: Selector<EntityCollection<T>, number>;\n\n  /** All entities in the cached collection. */\n  readonly selectEntities: Selector<EntityCollection<T>, T[]>;\n\n  /** Map of entity keys to entities */\n  readonly selectEntityMap: Selector<EntityCollection<T>, Dictionary<T>>;\n\n  /** Filter pattern applied by the entity collection's filter function */\n  readonly selectFilter: Selector<EntityCollection<T>, string>;\n\n  /** Entities in the cached collection that pass the filter function */\n  readonly selectFilteredEntities: Selector<EntityCollection<T>, T[]>;\n\n  /** Keys of the cached collection, in the collection's native sort order */\n  readonly selectKeys: Selector<EntityCollection<T>, string[] | number[]>;\n\n  /** True when the collection has been fully loaded. */\n  readonly selectLoaded: Selector<EntityCollection<T>, boolean>;\n\n  /** True when a multi-entity query command is in progress. */\n  readonly selectLoading: Selector<EntityCollection<T>, boolean>;\n\n  /** ChangeState (including original values) of entities with unsaved changes */\n  readonly selectChangeState: Selector<EntityCollection<T>, ChangeStateMap<T>>;\n}\n\n/**\n * The selector functions for entity collection members,\n * Selects from store root, through EntityCache, to the entity collection member\n * Contrast with {CollectionSelectors}.\n */\nexport interface EntitySelectors<T> {\n  /** Name of the entity collection for these selectors */\n  readonly entityName: string;\n\n  readonly [name: string]: MemoizedSelector<EntityCollection<T>, any> | string;\n\n  /** The cached EntityCollection itself */\n  readonly selectCollection: MemoizedSelector<Object, EntityCollection<T>>;\n\n  /** Count of entities in the cached collection. */\n  readonly selectCount: MemoizedSelector<Object, number>;\n\n  /** All entities in the cached collection. */\n  readonly selectEntities: MemoizedSelector<Object, T[]>;\n\n  /** The EntityCache */\n  readonly selectEntityCache: MemoizedSelector<Object, EntityCache>;\n\n  /** Map of entity keys to entities */\n  readonly selectEntityMap: MemoizedSelector<Object, Dictionary<T>>;\n\n  /** Filter pattern applied by the entity collection's filter function */\n  readonly selectFilter: MemoizedSelector<Object, string>;\n\n  /** Entities in the cached collection that pass the filter function */\n  readonly selectFilteredEntities: MemoizedSelector<Object, T[]>;\n\n  /** Keys of the cached collection, in the collection's native sort order */\n  readonly selectKeys: MemoizedSelector<Object, string[] | number[]>;\n\n  /** True when the collection has been fully loaded. */\n  readonly selectLoaded: MemoizedSelector<Object, boolean>;\n\n  /** True when a multi-entity query command is in progress. */\n  readonly selectLoading: MemoizedSelector<Object, boolean>;\n\n  /** ChangeState (including original values) of entities with unsaved changes */\n  readonly selectChangeState: MemoizedSelector<Object, ChangeStateMap<T>>;\n}\n\n/** Creates EntitySelector functions for entity collections. */\n@Injectable()\nexport class EntitySelectorsFactory {\n  private entityCollectionCreator: EntityCollectionCreator;\n  private selectEntityCache: EntityCacheSelector;\n\n  constructor(\n    @Optional() entityCollectionCreator?: EntityCollectionCreator,\n    @Optional()\n    @Inject(ENTITY_CACHE_SELECTOR_TOKEN)\n    selectEntityCache?: EntityCacheSelector\n  ) {\n    this.entityCollectionCreator =\n      entityCollectionCreator || new EntityCollectionCreator();\n    this.selectEntityCache =\n      selectEntityCache || createEntityCacheSelector(ENTITY_CACHE_NAME);\n  }\n\n  /**\n   * Create the NgRx selector from the store root to the named collection,\n   * e.g. from Object to Heroes.\n   * @param entityName the name of the collection\n   */\n  createCollectionSelector<\n    T = any,\n    C extends EntityCollection<T> = EntityCollection<T>\n  >(entityName: string) {\n    const getCollection = (cache: EntityCache = {}) =>\n      <C>(\n        (cache[entityName] ||\n          this.entityCollectionCreator.create<T>(entityName))\n      );\n    return createSelector(this.selectEntityCache, getCollection);\n  }\n\n  /////// createCollectionSelectors //////////\n\n  // Based on @ngrx/entity/state_selectors.ts\n\n  // tslint:disable:unified-signatures\n  // createCollectionSelectors(metadata) overload\n  /**\n   * Creates entity collection selectors from metadata.\n   * @param metadata - EntityMetadata for the collection.\n   * May be partial but much have `entityName`.\n   */\n  createCollectionSelectors<\n    T,\n    S extends CollectionSelectors<T> = CollectionSelectors<T>\n  >(metadata: EntityMetadata<T>): S;\n\n  // tslint:disable:unified-signatures\n  // createCollectionSelectors(entityName) overload\n  /**\n   * Creates default entity collection selectors for an entity type.\n   * Use the metadata overload for additional collection selectors.\n   * @param entityName - name of the entity type\n   */\n  createCollectionSelectors<\n    T,\n    S extends CollectionSelectors<T> = CollectionSelectors<T>\n  >(entityName: string): S;\n\n  // createCollectionSelectors implementation\n  createCollectionSelectors<\n    T,\n    S extends CollectionSelectors<T> = CollectionSelectors<T>\n  >(metadataOrName: EntityMetadata<T> | string): S {\n    const metadata =\n      typeof metadataOrName === 'string'\n        ? { entityName: metadataOrName }\n        : metadataOrName;\n    const selectKeys = (c: EntityCollection<T>) => c.ids;\n    const selectEntityMap = (c: EntityCollection<T>) => c.entities;\n\n    const selectEntities: Selector<EntityCollection<T>, T[]> = createSelector(\n      selectKeys,\n      selectEntityMap,\n      (keys: (number | string)[], entities: Dictionary<T>): T[] =>\n        keys.map(key => entities[key] as T)\n    );\n\n    const selectCount: Selector<EntityCollection<T>, number> = createSelector(\n      selectKeys,\n      keys => keys.length\n    );\n\n    // EntityCollection selectors that go beyond the ngrx/entity/EntityState selectors\n    const selectFilter = (c: EntityCollection<T>) => c.filter;\n\n    const filterFn = metadata.filterFn;\n    const selectFilteredEntities: Selector<EntityCollection<T>, T[]> = filterFn\n      ? createSelector(\n          selectEntities,\n          selectFilter,\n          (entities: T[], pattern: any): T[] => filterFn(entities, pattern)\n        )\n      : selectEntities;\n\n    const selectLoaded = (c: EntityCollection<T>) => c.loaded;\n    const selectLoading = (c: EntityCollection<T>) => c.loading;\n    const selectChangeState = (c: EntityCollection<T>) => c.changeState;\n\n    // Create collection selectors for each `additionalCollectionState` property.\n    // These all extend from `selectCollection`\n    const extra = metadata.additionalCollectionState || {};\n    const extraSelectors: {\n      [name: string]: Selector<EntityCollection<T>, any>;\n    } = {};\n    Object.keys(extra).forEach(k => {\n      extraSelectors['select' + k[0].toUpperCase() + k.slice(1)] = (\n        c: EntityCollection<T>\n      ) => (<any>c)[k];\n    });\n\n    return {\n      selectCount,\n      selectEntities,\n      selectEntityMap,\n      selectFilter,\n      selectFilteredEntities,\n      selectKeys,\n      selectLoaded,\n      selectLoading,\n      selectChangeState,\n      ...extraSelectors,\n    } as S;\n  }\n\n  /////// create //////////\n\n  // create(metadata) overload\n  /**\n   * Creates the store-rooted selectors for an entity collection.\n   * {EntitySelectors$Factory} turns them into selectors$.\n   *\n   * @param metadata - EntityMetadata for the collection.\n   * May be partial but much have `entityName`.\n   *\n   * Based on ngrx/entity/state_selectors.ts\n   * Differs in that these selectors select from the NgRx store root,\n   * through the collection, to the collection members.\n   */\n  create<T, S extends EntitySelectors<T> = EntitySelectors<T>>(\n    metadata: EntityMetadata<T>\n  ): S;\n\n  // create(entityName) overload\n  /**\n   * Creates the default store-rooted selectors for an entity collection.\n   * {EntitySelectors$Factory} turns them into selectors$.\n   * Use the metadata overload for additional collection selectors.\n   *\n   * @param entityName - name of the entity type.\n   *\n   * Based on ngrx/entity/state_selectors.ts\n   * Differs in that these selectors select from the NgRx store root,\n   * through the collection, to the collection members.\n   */\n  create<T, S extends EntitySelectors<T> = EntitySelectors<T>>(\n    // tslint:disable-next-line:unified-signatures\n    entityName: string\n  ): S;\n\n  // createCollectionSelectors implementation\n  create<T, S extends EntitySelectors<T> = EntitySelectors<T>>(\n    metadataOrName: EntityMetadata<T> | string\n  ): S {\n    const metadata =\n      typeof metadataOrName === 'string'\n        ? { entityName: metadataOrName }\n        : metadataOrName;\n    const entityName = metadata.entityName;\n    const selectCollection: Selector<\n      Object,\n      EntityCollection<T>\n    > = this.createCollectionSelector<T>(entityName);\n    const collectionSelectors = this.createCollectionSelectors<T>(metadata);\n\n    const entitySelectors: {\n      [name: string]: Selector<EntityCollection<T>, any>;\n    } = {};\n    Object.keys(collectionSelectors).forEach(k => {\n      entitySelectors[k] = createSelector(\n        selectCollection,\n        collectionSelectors[k]\n      );\n    });\n\n    return {\n      entityName,\n      selectCollection,\n      selectEntityCache: this.selectEntityCache,\n      ...entitySelectors,\n    } as S;\n  }\n}\n"]}