{"version":3,"file":"entity-cache-effects.js","sourceRoot":"ng://@ngrx/data/","sources":["src/effects/entity-cache-effects.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\n\nimport {\n  asyncScheduler,\n  Observable,\n  of,\n  merge,\n  race,\n  SchedulerLike,\n} from 'rxjs';\nimport {\n  concatMap,\n  catchError,\n  delay,\n  filter,\n  map,\n  mergeMap,\n} from 'rxjs/operators';\n\nimport { DataServiceError } from '../dataservices/data-service-error';\nimport {\n  ChangeSet,\n  excludeEmptyChangeSetItems,\n} from '../actions/entity-cache-change-set';\nimport { EntityActionFactory } from '../actions/entity-action-factory';\nimport { EntityOp } from '../actions/entity-op';\n\nimport {\n  EntityCacheAction,\n  SaveEntities,\n  SaveEntitiesCancel,\n  SaveEntitiesCanceled,\n  SaveEntitiesError,\n  SaveEntitiesSuccess,\n} from '../actions/entity-cache-action';\nimport { EntityCacheDataService } from '../dataservices/entity-cache-data.service';\nimport { ENTITY_EFFECTS_SCHEDULER } from './entity-effects-scheduler';\nimport { Logger } from '../utils/interfaces';\n\n@Injectable()\nexport class EntityCacheEffects {\n  // See https://github.com/ReactiveX/rxjs/blob/master/doc/marble-testing.md\n  /** Delay for error and skip observables. Must be multiple of 10 for marble testing. */\n  private responseDelay = 10;\n\n  constructor(\n    private actions: Actions,\n    private dataService: EntityCacheDataService,\n    private entityActionFactory: EntityActionFactory,\n    private logger: Logger,\n    /**\n     * Injecting an optional Scheduler that will be undefined\n     * in normal application usage, but its injected here so that you can mock out\n     * during testing using the RxJS TestScheduler for simulating passages of time.\n     */\n    @Optional()\n    @Inject(ENTITY_EFFECTS_SCHEDULER)\n    private scheduler: SchedulerLike\n  ) {}\n\n  /**\n   * Observable of SAVE_ENTITIES_CANCEL actions with non-null correlation ids\n   */\n  saveEntitiesCancel$: Observable<SaveEntitiesCancel> = createEffect(\n    () =>\n      this.actions.pipe(\n        ofType(EntityCacheAction.SAVE_ENTITIES_CANCEL),\n        filter((a: SaveEntitiesCancel) => a.payload.correlationId != null)\n      ),\n    { dispatch: false }\n  );\n\n  // Concurrent persistence requests considered unsafe.\n  // `mergeMap` allows for concurrent requests which may return in any order\n  saveEntities$: Observable<Action> = createEffect(() =>\n    this.actions.pipe(\n      ofType(EntityCacheAction.SAVE_ENTITIES),\n      mergeMap((action: SaveEntities) => this.saveEntities(action))\n    )\n  );\n\n  /**\n   * Perform the requested SaveEntities actions and return a scalar Observable<Action>\n   * that the effect should dispatch to the store after the server responds.\n   * @param action The SaveEntities action\n   */\n  saveEntities(action: SaveEntities): Observable<Action> {\n    const error = action.payload.error;\n    if (error) {\n      return this.handleSaveEntitiesError$(action)(error);\n    }\n    try {\n      const changeSet = excludeEmptyChangeSetItems(action.payload.changeSet);\n      const { correlationId, mergeStrategy, tag, url } = action.payload;\n      const options = { correlationId, mergeStrategy, tag };\n\n      if (changeSet.changes.length === 0) {\n        // nothing to save\n        return of(new SaveEntitiesSuccess(changeSet, url, options));\n      }\n\n      // Cancellation: returns Observable<SaveEntitiesCanceled> for a saveEntities action\n      // whose correlationId matches the cancellation correlationId\n      const c = this.saveEntitiesCancel$.pipe(\n        filter(a => correlationId === a.payload.correlationId),\n        map(\n          a =>\n            new SaveEntitiesCanceled(\n              correlationId,\n              a.payload.reason,\n              a.payload.tag\n            )\n        )\n      );\n\n      // Data: SaveEntities result as a SaveEntitiesSuccess action\n      const d = this.dataService.saveEntities(changeSet, url).pipe(\n        concatMap(result =>\n          this.handleSaveEntitiesSuccess$(action, this.entityActionFactory)(\n            result\n          )\n        ),\n        catchError(this.handleSaveEntitiesError$(action))\n      );\n\n      // Emit which ever gets there first; the other observable is terminated.\n      return race(c, d);\n    } catch (err) {\n      return this.handleSaveEntitiesError$(action)(err);\n    }\n  }\n\n  /** return handler of error result of saveEntities, returning a scalar observable of error action */\n  private handleSaveEntitiesError$(\n    action: SaveEntities\n  ): (err: DataServiceError | Error) => Observable<Action> {\n    // Although error may return immediately,\n    // ensure observable takes some time,\n    // as app likely assumes asynchronous response.\n    return (err: DataServiceError | Error) => {\n      const error =\n        err instanceof DataServiceError ? err : new DataServiceError(err, null);\n      return of(new SaveEntitiesError(error, action)).pipe(\n        delay(this.responseDelay, this.scheduler || asyncScheduler)\n      );\n    };\n  }\n\n  /** return handler of the ChangeSet result of successful saveEntities() */\n  private handleSaveEntitiesSuccess$(\n    action: SaveEntities,\n    entityActionFactory: EntityActionFactory\n  ): (changeSet: ChangeSet) => Observable<Action> {\n    const { url, correlationId, mergeStrategy, tag } = action.payload;\n    const options = { correlationId, mergeStrategy, tag };\n\n    return changeSet => {\n      // DataService returned a ChangeSet with possible updates to the saved entities\n      if (changeSet) {\n        return of(new SaveEntitiesSuccess(changeSet, url, options));\n      }\n\n      // No ChangeSet = Server probably responded '204 - No Content' because\n      // it made no changes to the inserted/updated entities.\n      // Respond with success action best on the ChangeSet in the request.\n      changeSet = action.payload.changeSet;\n\n      // If pessimistic save, return success action with the original ChangeSet\n      if (!action.payload.isOptimistic) {\n        return of(new SaveEntitiesSuccess(changeSet, url, options));\n      }\n\n      // If optimistic save, avoid cache grinding by just turning off the loading flags\n      // for all collections in the original ChangeSet\n      const entityNames = changeSet.changes.reduce(\n        (acc, item) =>\n          acc.indexOf(item.entityName) === -1\n            ? acc.concat(item.entityName)\n            : acc,\n        [] as string[]\n      );\n      return merge(\n        entityNames.map(name =>\n          entityActionFactory.create(name, EntityOp.SET_LOADING, false)\n        )\n      );\n    };\n  }\n}\n"]}