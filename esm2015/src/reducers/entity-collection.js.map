{"version":3,"file":"entity-collection.js","sourceRoot":"ng://@ngrx/data/","sources":["src/reducers/entity-collection.ts"],"names":[],"mappings":";;;;;;AAGA,MAAY,UAAU;IACpB,mEAAmE;IACnE,SAAS,GAAI;IACb,6CAA6C;IAC7C,KAAK,GAAA;IACL,6EAA6E;IAC7E,OAAO,GAAA;IACP,+CAA+C;IAC/C,OAAO,GAAA;EACR;;;;;;;;;;;;AAMD,iCAGC;;;IAFC,iCAAuB;;IACvB,oCAA8B;;;;;;;;AAahC,sCAWC;;;;;;IATC,sCAAmB;;;;;IAEnB,uCAA+B;;;;;IAE/B,kCAAgB;;;;;IAEhB,kCAAgB;;;;;IAEhB,mCAAiB","sourcesContent":["import { EntityState, Dictionary } from '@ngrx/entity';\n\n/** Types of change in a ChangeState instance */\nexport enum ChangeType {\n  /** The entity has not changed from its last known server state. */\n  Unchanged = 0,\n  /** The entity was added to the collection */\n  Added,\n  /** The entity is scheduled for delete and was removed from the collection */\n  Deleted,\n  /** The entity in the collection was updated */\n  Updated,\n}\n\n/**\n * Change state for an entity with unsaved changes;\n * an entry in an EntityCollection.changeState map\n */\nexport interface ChangeState<T> {\n  changeType: ChangeType;\n  originalValue?: T | undefined;\n}\n\n/**\n * Map of entity primary keys to entity ChangeStates.\n * Each entry represents an entity with unsaved changes.\n */\nexport type ChangeStateMap<T> = Dictionary<ChangeState<T>>;\n\n/**\n * Data and information about a collection of entities of a single type.\n * EntityCollections are maintained in the EntityCache within the ngrx store.\n */\nexport interface EntityCollection<T = any> extends EntityState<T> {\n  /** Name of the entity type for this collection */\n  entityName: string;\n  /** A map of ChangeStates, keyed by id, for entities with unsaved changes */\n  changeState: ChangeStateMap<T>;\n  /** The user's current collection filter pattern */\n  filter?: string;\n  /** true if collection was ever filled by QueryAll; forced false if cleared */\n  loaded: boolean;\n  /** true when a query or save operation is in progress */\n  loading: boolean;\n}\n"]}