{"version":3,"file":"default-pluralizer.js","sourceRoot":"ng://@ngrx/data/","sources":["src/utils/default-pluralizer.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAC7D,OAAO,EAAqB,kBAAkB,EAAE,MAAM,cAAc,CAAC;;MAE/D,WAAW,GAAG;IAClB,WAAW;IACX,UAAU;IACV,UAAU;IACV,WAAW;IACX,UAAU;IACV,aAAa;IACb,WAAW;IACX,aAAa;IACb,OAAO;IACP,QAAQ;CACT;AAGD,MAAM,OAAO,iBAAiB;;;;IAG5B,YAGE,WAAgC;QALlC,gBAAW,GAAsB,EAAE,CAAC;QAOlC,iCAAiC;QACjC,IAAI,WAAW,EAAE;YACf,WAAW,CAAC,OAAO;;;;YAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,EAAC,CAAC;SACzD;IACH,CAAC;;;;;;;IAMD,SAAS,CAAC,IAAY;;cACd,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QACrC,IAAI,MAAM,EAAE;YACV,OAAO,MAAM,CAAC;SACf;QACD,mCAAmC;QACnC,IAAI,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,EAAE;YAChD,OAAO,IAAI,CAAC;YACZ,YAAY;SACb;aAAM,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACjC,OAAO,IAAI,GAAG,GAAG,CAAC;YAClB,gBAAgB;SACjB;aAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;YAC/C,yCAAyC;SAC1C;aAAM,IAAI,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACzC,OAAO,IAAI,GAAG,IAAI,CAAC;SACpB;aAAM;YACL,OAAO,IAAI,GAAG,GAAG,CAAC;SACnB;IACH,CAAC;;;;;;IAMD,mBAAmB,CAAC,WAA8B;QAChD,IAAI,CAAC,WAAW,mCAAQ,IAAI,CAAC,WAAW,GAAK,CAAC,WAAW,IAAI,EAAE,CAAC,CAAE,CAAC;IACrE,CAAC;;;YA/CF,UAAU;;;;wCAKN,QAAQ,YACR,MAAM,SAAC,kBAAkB;;;;IAJ5B,wCAAoC","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { EntityPluralNames, PLURAL_NAMES_TOKEN } from './interfaces';\n\nconst uncountable = [\n  // 'sheep',\n  // 'fish',\n  // 'deer',\n  // 'moose',\n  // 'rice',\n  // 'species',\n  'equipment',\n  'information',\n  'money',\n  'series',\n];\n\n@Injectable()\nexport class DefaultPluralizer {\n  pluralNames: EntityPluralNames = {};\n\n  constructor(\n    @Optional()\n    @Inject(PLURAL_NAMES_TOKEN)\n    pluralNames: EntityPluralNames[]\n  ) {\n    // merge each plural names object\n    if (pluralNames) {\n      pluralNames.forEach(pn => this.registerPluralNames(pn));\n    }\n  }\n\n  /**\n   * Pluralize a singular name using common English language pluralization rules\n   * Examples: \"company\" -> \"companies\", \"employee\" -> \"employees\", \"tax\" -> \"taxes\"\n   */\n  pluralize(name: string) {\n    const plural = this.pluralNames[name];\n    if (plural) {\n      return plural;\n    }\n    // singular and plural are the same\n    if (uncountable.indexOf(name.toLowerCase()) >= 0) {\n      return name;\n      // vowel + y\n    } else if (/[aeiou]y$/.test(name)) {\n      return name + 's';\n      // consonant + y\n    } else if (name.endsWith('y')) {\n      return name.substr(0, name.length - 1) + 'ies';\n      // endings typically pluralized with 'es'\n    } else if (/[s|ss|sh|ch|x|z]$/.test(name)) {\n      return name + 'es';\n    } else {\n      return name + 's';\n    }\n  }\n\n  /**\n   * Register a mapping of entity type name to the entity name's plural\n   * @param pluralNames {EntityPluralNames} plural names for entity types\n   */\n  registerPluralNames(pluralNames: EntityPluralNames): void {\n    this.pluralNames = { ...this.pluralNames, ...(pluralNames || {}) };\n  }\n}\n"]}