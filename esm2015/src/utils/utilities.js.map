{"version":3,"file":"utilities.js","sourceRoot":"ng://@ngrx/data/","sources":["src/utils/utilities.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,MAAM,UAAU,eAAe,CAAC,MAAW;IACzC,OAAO,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC;AAChD,CAAC;;;;;;;;;;;;;;;;AAaD,MAAM,UAAU,WAAW,CAAI,IAAY;IACzC,IAAI,IAAI,IAAI,IAAI,EAAE;QAChB,OAAO,EAAE,CAAC;KACX;IACD,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;cACpB,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI;QAC5B,IAAI,GAAG,CAAC,GAAG,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;KAC3B;IACD,OAAO,IAAI,CAAC;AACd,CAAC;;;;;;;;;AAOD,MAAM,UAAU,eAAe,CAAI,QAAwB;IACzD,QAAQ,GAAG,QAAQ,IAAI,CAAC,mBAAA,eAAe,EAAiB,CAAC,CAAC;IAC1D;;;;;OAKG;IACH;;;;IAAO,SAAS,QAAQ,CAAC,MAAkB;;cACnC,EAAE,GAAQ,mBAAA,QAAQ,EAAC,CAAC,mBAAA,MAAM,EAAK,CAAC;QACtC,IAAI,EAAE,IAAI,IAAI,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;SAC3D;QACD,OAAO,MAAM,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;IAC3C,CAAC,EAAC;AACJ,CAAC","sourcesContent":["import { IdSelector, Update } from '@ngrx/entity';\n\n/**\n * Default function that returns the entity's primary key (pkey).\n * Assumes that the entity has an `id` pkey property.\n * Returns `undefined` if no entity or `id`.\n * Every selectId fn must return `undefined` when it cannot produce a full pkey.\n */\nexport function defaultSelectId(entity: any) {\n  return entity == null ? undefined : entity.id;\n}\n\n/**\n * Flatten first arg if it is an array\n * Allows fn with ...rest signature to be called with an array instead of spread\n * Example:\n * ```\n * // See entity-action-operators.ts\n * const persistOps = [EntityOp.QUERY_ALL, EntityOp.ADD, ...];\n * actions.pipe(ofEntityOp(...persistOps)) // works\n * actions.pipe(ofEntityOp(persistOps)) // also works\n * ```\n * */\nexport function flattenArgs<T>(args?: any[]): T[] {\n  if (args == null) {\n    return [];\n  }\n  if (Array.isArray(args[0])) {\n    const [head, ...tail] = args;\n    args = [...head, ...tail];\n  }\n  return args;\n}\n\n/**\n * Return a function that converts an entity (or partial entity) into the `Update<T>`\n * whose `id` is the primary key and\n * `changes` is the entity (or partial entity of changes).\n */\nexport function toUpdateFactory<T>(selectId?: IdSelector<T>) {\n  selectId = selectId || (defaultSelectId as IdSelector<T>);\n  /**\n   * Convert an entity (or partial entity) into the `Update<T>`\n   * whose `id` is the primary key and\n   * `changes` is the entity (or partial entity of changes).\n   * @param selectId function that returns the entity's primary key (id)\n   */\n  return function toUpdate(entity: Partial<T>): Update<T> {\n    const id: any = selectId!(entity as T);\n    if (id == null) {\n      throw new Error('Primary key may not be null/undefined.');\n    }\n    return entity && { id, changes: entity };\n  };\n}\n"]}