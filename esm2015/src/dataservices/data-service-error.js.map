{"version":3,"file":"data-service-error.js","sourceRoot":"ng://@ngrx/data/","sources":["src/dataservices/data-service-error.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAWA,MAAM,OAAO,gBAAgB;;;;;IAG3B,YAAmB,KAAU,EAAS,WAA+B;QAAlD,UAAK,GAAL,KAAK,CAAK;QAAS,gBAAW,GAAX,WAAW,CAAoB;QACnE,IAAI,CAAC,OAAO,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC3E,CAAC;CACF;;;IALC,mCAAuB;;IAEX,iCAAiB;;IAAE,uCAAsC;;;;;;;AAMvE,SAAS,cAAc,CAAC,WAAgB;UAChC,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,WAAW;;QACxC,UAAU,GAAkB,IAAI;IACpC,IAAI,KAAK,EAAE;QACT,yDAAyD;QACzD,UAAU,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC;KAChE;SAAM,IAAI,OAAO,EAAE;QAClB,UAAU,GAAG,OAAO,CAAC;KACtB;SAAM,IAAI,IAAI,EAAE;QACf,+CAA+C;QAC/C,UAAU,GAAG,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;KAC3D;IAED,OAAO,OAAO,UAAU,KAAK,QAAQ;QACnC,CAAC,CAAC,UAAU;QACZ,CAAC,CAAC,UAAU;YACV,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;YAC5B,CAAC,CAAC,IAAI,CAAC;AACb,CAAC;;;;;AAGD,kDAGC;;;IAFC,6CAAwB;;IACxB,sDAA6B","sourcesContent":["import { EntityAction } from '../actions/entity-action';\nimport { RequestData } from './interfaces';\n\n/**\n * Error from a DataService\n * The source error either comes from a failed HTTP response or was thrown within the service.\n * @param error the HttpErrorResponse or the error thrown by the service\n * @param requestData the HTTP request information such as the method and the url.\n */\n// If extend from Error, `dse instanceof DataServiceError` returns false\n// in some (all?) unit tests so don't bother trying.\nexport class DataServiceError {\n  message: string | null;\n\n  constructor(public error: any, public requestData: RequestData | null) {\n    this.message = typeof error === 'string' ? error : extractMessage(error);\n  }\n}\n\n// Many ways the error can be shaped. These are the ways we recognize.\nfunction extractMessage(sourceError: any): string | null {\n  const { error, body, message } = sourceError;\n  let errMessage: string | null = null;\n  if (error) {\n    // prefer HttpErrorResponse.error to its message property\n    errMessage = typeof error === 'string' ? error : error.message;\n  } else if (message) {\n    errMessage = message;\n  } else if (body) {\n    // try the body if no error or message property\n    errMessage = typeof body === 'string' ? body : body.error;\n  }\n\n  return typeof errMessage === 'string'\n    ? errMessage\n    : errMessage\n      ? JSON.stringify(errMessage)\n      : null;\n}\n\n/** Payload for an EntityAction data service error such as QUERY_ALL_ERROR */\nexport interface EntityActionDataServiceError {\n  error: DataServiceError;\n  originalAction: EntityAction;\n}\n"]}