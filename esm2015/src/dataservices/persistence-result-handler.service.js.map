{"version":3,"file":"persistence-result-handler.service.js","sourceRoot":"ng://@ngrx/data/","sources":["src/dataservices/persistence-result-handler.service.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAG3C,OAAO,EACL,gBAAgB,GAEjB,MAAM,sBAAsB,CAAC;AAE9B,OAAO,EAAE,mBAAmB,EAAE,MAAM,kCAAkC,CAAC;AACvE,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAClE,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;;;;;AAK7C,MAAM,OAAgB,wBAAwB;CAU7C;;;;;;;;IARC,iFAA4E;;;;;;;IAG5E,+EAIgD;;;;;;AAQlD,MAAM,OAAO,+BAA+B;;;;;IAE1C,YACU,MAAc,EACd,mBAAwC;QADxC,WAAM,GAAN,MAAM,CAAQ;QACd,wBAAmB,GAAnB,mBAAmB,CAAqB;IAC/C,CAAC;;;;;;IAGJ,aAAa,CAAC,cAA4B;;cAClC,SAAS,GAAG,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC;QAChE;;;;QAAO,CAAC,IAAS,EAAE,EAAE,CACnB,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,cAAc,EAAE;YACxD,QAAQ,EAAE,SAAS;YACnB,IAAI;SACL,CAAC,EAAC;IACP,CAAC;;;;;;IAGD,WAAW,CACT,cAA4B;;cAItB,OAAO,GAAG,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC;QAE5D;;;;QAAO,CAAC,GAA6B,EAAE,EAAE;;kBACjC,KAAK,GACT,GAAG,YAAY,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,gBAAgB,CAAC,GAAG,EAAE,IAAI,CAAC;;kBACnE,SAAS,GAAiC,EAAE,KAAK,EAAE,cAAc,EAAE;YACzE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;;kBACvB,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAEtD,cAAc,EAAE;gBAChB,QAAQ,EAAE,OAAO;gBACjB,IAAI,EAAE,SAAS;aAChB,CAAC;YACF,OAAO,MAAM,CAAC;QAChB,CAAC,EAAC;IACJ,CAAC;;;YAvCF,UAAU;;;;YArBF,MAAM;YAFN,mBAAmB;;;;;;;IA2BxB,iDAAsB;;;;;IACtB,8DAAgD","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Action } from '@ngrx/store';\n\nimport {\n  DataServiceError,\n  EntityActionDataServiceError,\n} from './data-service-error';\nimport { EntityAction } from '../actions/entity-action';\nimport { EntityActionFactory } from '../actions/entity-action-factory';\nimport { makeErrorOp, makeSuccessOp } from '../actions/entity-op';\nimport { Logger } from '../utils/interfaces';\n\n/**\n * Handling of responses from persistence operation\n */\nexport abstract class PersistenceResultHandler {\n  /** Handle successful result of persistence operation for an action */\n  abstract handleSuccess(originalAction: EntityAction): (data: any) => Action;\n\n  /** Handle error result of persistence operation for an action */\n  abstract handleError(\n    originalAction: EntityAction\n  ): (\n    error: DataServiceError | Error\n  ) => EntityAction<EntityActionDataServiceError>;\n}\n\n/**\n * Default handling of responses from persistence operation,\n * specifically an EntityDataService\n */\n@Injectable()\nexport class DefaultPersistenceResultHandler\n  implements PersistenceResultHandler {\n  constructor(\n    private logger: Logger,\n    private entityActionFactory: EntityActionFactory\n  ) {}\n\n  /** Handle successful result of persistence operation on an EntityAction */\n  handleSuccess(originalAction: EntityAction): (data: any) => Action {\n    const successOp = makeSuccessOp(originalAction.payload.entityOp);\n    return (data: any) =>\n      this.entityActionFactory.createFromAction(originalAction, {\n        entityOp: successOp,\n        data,\n      });\n  }\n\n  /** Handle error result of persistence operation on an EntityAction */\n  handleError(\n    originalAction: EntityAction\n  ): (\n    error: DataServiceError | Error\n  ) => EntityAction<EntityActionDataServiceError> {\n    const errorOp = makeErrorOp(originalAction.payload.entityOp);\n\n    return (err: DataServiceError | Error) => {\n      const error =\n        err instanceof DataServiceError ? err : new DataServiceError(err, null);\n      const errorData: EntityActionDataServiceError = { error, originalAction };\n      this.logger.error(errorData);\n      const action = this.entityActionFactory.createFromAction<\n        EntityActionDataServiceError\n      >(originalAction, {\n        entityOp: errorOp,\n        data: errorData,\n      });\n      return action;\n    };\n  }\n}\n"]}