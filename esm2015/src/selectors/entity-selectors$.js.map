{"version":3,"file":"entity-selectors$.js","sourceRoot":"ng://@ngrx/data/","sources":["src/selectors/entity-selectors$.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AACpC,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAIxC,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAGrD,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,oCAAoC,CAAC;AAClE,OAAO,EACL,2BAA2B,GAE5B,MAAM,yBAAyB,CAAC;;;;;;AAWjC,sCA4CC;;;;;;IA1CC,sCAA4B;;;;;IAM5B,uCAA6E;;;;;IAG7E,kCAAoD;;;;;IAGpD,qCAAiD;;;;;IAGjD,0CAAkD;;;;;IAGlD,sCAAsE;;;;;IAGtE,mCAA2C;;;;;IAG3C,mCAAqD;;;;;IAGrD,6CAAyD;;;;;IAGzD,iCAA6E;;;;;IAG7E,mCAAuD;;;;;IAGvD,oCAAwD;;;;;IAGxD,wCAE6B;;;;;;AAK/B,MAAM,OAAO,uBAAuB;;;;;;IAOlC,YACU,KAAiB,EACjB,OAA8B,EAE9B,iBAAsC;QAHtC,UAAK,GAAL,KAAK,CAAY;QACjB,YAAO,GAAP,OAAO,CAAuB;QAE9B,sBAAiB,GAAjB,iBAAiB,CAAqB;QAE9C,oEAAoE;QACpE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC9D,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,IAAI,CACrC,MAAM;;;;QACJ,CAAC,EAAgB,EAAE,EAAE,CACnB,EAAE,CAAC,OAAO;YACV,EAAE,CAAC,OAAO,CAAC,QAAQ;YACnB,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EACzC,EACD,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;IACJ,CAAC;;;;;;;;;;IAQD,MAAM,CACJ,UAAkB,EAClB,SAA6B;;cAEvB,UAAU,GAA4B;YAC1C,UAAU;SACX;QAED,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO;;;;QAAC,IAAI,CAAC,EAAE;YACpC,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;;;;sBAGvB,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG;gBAC1D,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,mBAAK,SAAS,EAAA,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;aAC/D;QACH,CAAC,EAAC,CAAC;QACH,UAAU,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;QACxE,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAChD,YAAY,CAAC,UAAU,CAAC,CACzB,CAAC;QACF,OAAO,mBAAA,UAAU,EAAM,CAAC;IAC1B,CAAC;;;YAtDF,UAAU;;;;YAvEF,KAAK;YACL,OAAO;4CAiFX,MAAM,SAAC,2BAA2B;;;;;;;IARrC,+CAAsC;;;;;IAGtC,sDAA8C;;;;;IAG5C,wCAAyB;;;;;IACzB,0CAAsC;;;;;IACtC,oDAC8C","sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Actions } from '@ngrx/effects';\nimport { Dictionary } from '@ngrx/entity';\n\nimport { Observable } from 'rxjs';\nimport { filter, shareReplay } from 'rxjs/operators';\n\nimport { EntityAction } from '../actions/entity-action';\nimport { OP_ERROR } from '../actions/entity-op';\nimport { ofEntityType } from '../actions/entity-action-operators';\nimport {\n  ENTITY_CACHE_SELECTOR_TOKEN,\n  EntityCacheSelector,\n} from './entity-cache-selector';\nimport { EntitySelectors } from './entity-selectors';\nimport { EntityCache } from '../reducers/entity-cache';\nimport {\n  EntityCollection,\n  ChangeStateMap,\n} from '../reducers/entity-collection';\n\n/**\n * The selector observable functions for entity collection members.\n */\nexport interface EntitySelectors$<T> {\n  /** Name of the entity collection for these selectors$ */\n  readonly entityName: string;\n\n  /** Names from custom selectors from additionalCollectionState fits here, 'any' to avoid conflict with entityName */\n  readonly [name: string]: Observable<any> | Store<any> | any;\n\n  /** Observable of the collection as a whole */\n  readonly collection$: Observable<EntityCollection> | Store<EntityCollection>;\n\n  /** Observable of count of entities in the cached collection. */\n  readonly count$: Observable<number> | Store<number>;\n\n  /** Observable of all entities in the cached collection. */\n  readonly entities$: Observable<T[]> | Store<T[]>;\n\n  /** Observable of actions related to this entity type. */\n  readonly entityActions$: Observable<EntityAction>;\n\n  /** Observable of the map of entity keys to entities */\n  readonly entityMap$: Observable<Dictionary<T>> | Store<Dictionary<T>>;\n\n  /** Observable of error actions related to this entity type. */\n  readonly errors$: Observable<EntityAction>;\n\n  /** Observable of the filter pattern applied by the entity collection's filter function */\n  readonly filter$: Observable<string> | Store<string>;\n\n  /** Observable of entities in the cached collection that pass the filter function */\n  readonly filteredEntities$: Observable<T[]> | Store<T[]>;\n\n  /** Observable of the keys of the cached collection, in the collection's native sort order */\n  readonly keys$: Observable<string[] | number[]> | Store<string[] | number[]>;\n\n  /** Observable true when the collection has been loaded */\n  readonly loaded$: Observable<boolean> | Store<boolean>;\n\n  /** Observable true when a multi-entity query command is in progress. */\n  readonly loading$: Observable<boolean> | Store<boolean>;\n\n  /** ChangeState (including original values) of entities with unsaved changes */\n  readonly changeState$:\n    | Observable<ChangeStateMap<T>>\n    | Store<ChangeStateMap<T>>;\n}\n\n/** Creates observable EntitySelectors$ for entity collections. */\n@Injectable()\nexport class EntitySelectors$Factory {\n  /** Observable of the EntityCache */\n  entityCache$: Observable<EntityCache>;\n\n  /** Observable of error EntityActions (e.g. QUERY_ALL_ERROR) for all entity types */\n  entityActionErrors$: Observable<EntityAction>;\n\n  constructor(\n    private store: Store<any>,\n    private actions: Actions<EntityAction>,\n    @Inject(ENTITY_CACHE_SELECTOR_TOKEN)\n    private selectEntityCache: EntityCacheSelector\n  ) {\n    // This service applies to the cache in ngrx/store named `cacheName`\n    this.entityCache$ = this.store.select(this.selectEntityCache);\n    this.entityActionErrors$ = actions.pipe(\n      filter(\n        (ea: EntityAction) =>\n          ea.payload &&\n          ea.payload.entityOp &&\n          ea.payload.entityOp.endsWith(OP_ERROR)\n      ),\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * Creates an entity collection's selectors$ observables for this factory's store.\n   * `selectors$` are observable selectors of the cached entity collection.\n   * @param entityName - is also the name of the collection.\n   * @param selectors - selector functions for this collection.\n   **/\n  create<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>>(\n    entityName: string,\n    selectors: EntitySelectors<T>\n  ): S$ {\n    const selectors$: { [prop: string]: any } = {\n      entityName,\n    };\n\n    Object.keys(selectors).forEach(name => {\n      if (name.startsWith('select')) {\n        // strip 'select' prefix from the selector fn name and append `$`\n        // Ex: 'selectEntities' => 'entities$'\n        const name$ = name[6].toLowerCase() + name.substr(7) + '$';\n        selectors$[name$] = this.store.select((<any>selectors)[name]);\n      }\n    });\n    selectors$.entityActions$ = this.actions.pipe(ofEntityType(entityName));\n    selectors$.errors$ = this.entityActionErrors$.pipe(\n      ofEntityType(entityName)\n    );\n    return selectors$ as S$;\n  }\n}\n"]}