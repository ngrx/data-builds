import { Inject, Injectable, Optional } from '@angular/core';
import { createSelector } from '@ngrx/store';
import { ENTITY_CACHE_SELECTOR_TOKEN, createEntityCacheSelector, } from './entity-cache-selector';
import { ENTITY_CACHE_NAME } from '../reducers/constants';
import { EntityCollectionCreator } from '../reducers/entity-collection-creator';
/** Creates EntitySelector functions for entity collections. */
export class EntitySelectorsFactory {
    constructor(entityCollectionCreator, selectEntityCache) {
        this.entityCollectionCreator =
            entityCollectionCreator || new EntityCollectionCreator();
        this.selectEntityCache =
            selectEntityCache || createEntityCacheSelector(ENTITY_CACHE_NAME);
    }
    /**
     * Create the NgRx selector from the store root to the named collection,
     * e.g. from Object to Heroes.
     * @param entityName the name of the collection
     */
    createCollectionSelector(entityName) {
        const getCollection = (cache = {}) => ((cache[entityName] ||
            this.entityCollectionCreator.create(entityName)));
        return createSelector(this.selectEntityCache, getCollection);
    }
    // createCollectionSelectors implementation
    createCollectionSelectors(metadataOrName) {
        const metadata = typeof metadataOrName === 'string'
            ? { entityName: metadataOrName }
            : metadataOrName;
        const selectKeys = (c) => c.ids;
        const selectEntityMap = (c) => c.entities;
        const selectEntities = createSelector(selectKeys, selectEntityMap, (keys, entities) => keys.map((key) => entities[key]));
        const selectCount = createSelector(selectKeys, (keys) => keys.length);
        // EntityCollection selectors that go beyond the ngrx/entity/EntityState selectors
        const selectFilter = (c) => c.filter;
        const filterFn = metadata.filterFn;
        const selectFilteredEntities = filterFn
            ? createSelector(selectEntities, selectFilter, (entities, pattern) => filterFn(entities, pattern))
            : selectEntities;
        const selectLoaded = (c) => c.loaded;
        const selectLoading = (c) => c.loading;
        const selectChangeState = (c) => c.changeState;
        // Create collection selectors for each `additionalCollectionState` property.
        // These all extend from `selectCollection`
        const extra = metadata.additionalCollectionState || {};
        const extraSelectors = {};
        Object.keys(extra).forEach((k) => {
            extraSelectors['select' + k[0].toUpperCase() + k.slice(1)] = (c) => c[k];
        });
        return Object.assign({ selectCount,
            selectEntities,
            selectEntityMap,
            selectFilter,
            selectFilteredEntities,
            selectKeys,
            selectLoaded,
            selectLoading,
            selectChangeState }, extraSelectors);
    }
    // createCollectionSelectors implementation
    create(metadataOrName) {
        const metadata = typeof metadataOrName === 'string'
            ? { entityName: metadataOrName }
            : metadataOrName;
        const entityName = metadata.entityName;
        const selectCollection = this.createCollectionSelector(entityName);
        const collectionSelectors = this.createCollectionSelectors(metadata);
        const entitySelectors = {};
        Object.keys(collectionSelectors).forEach((k) => {
            entitySelectors[k] = createSelector(selectCollection, collectionSelectors[k]);
        });
        return Object.assign({ entityName,
            selectCollection, selectEntityCache: this.selectEntityCache }, entitySelectors);
    }
}
/** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
EntitySelectorsFactory.decorators = [
    { type: Injectable }
];
/**
 * @type {function(): !Array<(null|{
 *   type: ?,
 *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),
 * })>}
 * @nocollapse
 */
EntitySelectorsFactory.ctorParameters = () => [
    { type: EntityCollectionCreator, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ENTITY_CACHE_SELECTOR_TOKEN,] }] }
];
//# sourceMappingURL=data:application/json;base64,