{"version":3,"file":"entity-metadata.js","sourceRoot":"ng://@ngrx/data/","sources":["src/entity-metadata/entity-metadata.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;;AAO/C,MAAM,OAAO,qBAAqB,GAAG,IAAI,cAAc,CACrD,4BAA4B,CAC7B;;;;;;AAGD,oCAQC;;;IAPC,oCAAmB;;IACnB,iDAAkE;;IAClE,kCAA6B;;IAC7B,0CAA2B;;IAC3B,kCAAyB;;IACzB,sCAAmC;;IACnC,mDAA8B;;;;;;AAIhC,uCAEC","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nimport { IdSelector, Comparer } from '@ngrx/entity';\n\nimport { EntityDispatcherDefaultOptions } from '../dispatchers/entity-dispatcher-default-options';\nimport { EntityFilterFn } from './entity-filters';\n\nexport const ENTITY_METADATA_TOKEN = new InjectionToken<EntityMetadataMap>(\n  '@ngrx/data/entity-metadata'\n);\n\n/** Metadata that describe an entity type and its collection to @ngrx/data */\nexport interface EntityMetadata<T = any, S extends object = {}> {\n  entityName: string;\n  entityDispatcherOptions?: Partial<EntityDispatcherDefaultOptions>;\n  filterFn?: EntityFilterFn<T>;\n  noChangeTracking?: boolean;\n  selectId?: IdSelector<T>;\n  sortComparer?: false | Comparer<T>;\n  additionalCollectionState?: S;\n}\n\n/** Map entity-type name to its EntityMetadata */\nexport interface EntityMetadataMap {\n  [entityName: string]: Partial<EntityMetadata<any>>;\n}\n"]}