{"version":3,"file":"entity-collection-service-elements-factory.js","sourceRoot":"ng://@ngrx/data/","sources":["src/entity-services/entity-collection-service-elements-factory.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,uBAAuB,EAAE,MAAM,0CAA0C,CAAC;AACnF,OAAO,EAAE,uBAAuB,EAAE,MAAM,8CAA8C,CAAC;AACvF,OAAO,EAEL,sBAAsB,GACvB,MAAM,+BAA+B,CAAC;AACvC,OAAO,EAEL,uBAAuB,GACxB,MAAM,gCAAgC,CAAC;;;;;;AAGxC,qDAQC;;;IAJC,qDAAyC;;IACzC,qDAA4B;;IAC5B,oDAAuC;;IACvC,qDAAwB;;;;;AAK1B,MAAM,OAAO,sCAAsC;;;;;;;IACjD,YACU,uBAAgD,EAChD,uBAAgD,EAChD,sBAA8C,EAC9C,uBAAgD;QAHhD,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,4BAAuB,GAAvB,uBAAuB,CAAyB;IACvD,CAAC;;;;;;;IAMJ,MAAM,CACJ,UAAkB;QAElB,UAAU,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;;cACzB,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAC3D,UAAU,CACX;;cACK,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CACpD,UAAU,EACV,UAAU,CAAC,QAAQ,EACnB,UAAU,CAAC,uBAAuB,CACnC;;cACK,SAAS,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAClD,UAAU,CAAC,QAAQ,CACpB;;cACK,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CACpD,UAAU,EACV,SAAS,CACV;QACD,OAAO;YACL,UAAU;YACV,UAAU;YACV,SAAS;YACT,UAAU;SACX,CAAC;IACJ,CAAC;;;YAtCF,UAAU;;;;YAvBF,uBAAuB;YACvB,uBAAuB;YAG9B,sBAAsB;YAItB,uBAAuB;;;;;;;IAkBrB,yEAAwD;;;;;IACxD,yEAAwD;;;;;IACxD,wEAAsD;;;;;IACtD,yEAAwD","sourcesContent":["import { Injectable } from '@angular/core';\nimport { EntityDispatcher } from '../dispatchers/entity-dispatcher';\nimport { EntityDispatcherFactory } from '../dispatchers/entity-dispatcher-factory';\nimport { EntityDefinitionService } from '../entity-metadata/entity-definition.service';\nimport {\n  EntitySelectors,\n  EntitySelectorsFactory,\n} from '../selectors/entity-selectors';\nimport {\n  EntitySelectors$,\n  EntitySelectors$Factory,\n} from '../selectors/entity-selectors$';\n\n/** Core ingredients of an EntityCollectionService */\nexport interface EntityCollectionServiceElements<\n  T,\n  S$ extends EntitySelectors$<T> = EntitySelectors$<T>\n> {\n  readonly dispatcher: EntityDispatcher<T>;\n  readonly entityName: string;\n  readonly selectors: EntitySelectors<T>;\n  readonly selectors$: S$;\n}\n\n/** Creates the core elements of the EntityCollectionService for an entity type. */\n@Injectable()\nexport class EntityCollectionServiceElementsFactory {\n  constructor(\n    private entityDispatcherFactory: EntityDispatcherFactory,\n    private entityDefinitionService: EntityDefinitionService,\n    private entitySelectorsFactory: EntitySelectorsFactory,\n    private entitySelectors$Factory: EntitySelectors$Factory\n  ) {}\n\n  /**\n   * Get the ingredients for making an EntityCollectionService for this entity type\n   * @param entityName - name of the entity type\n   */\n  create<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>>(\n    entityName: string\n  ): EntityCollectionServiceElements<T, S$> {\n    entityName = entityName.trim();\n    const definition = this.entityDefinitionService.getDefinition<T>(\n      entityName\n    );\n    const dispatcher = this.entityDispatcherFactory.create<T>(\n      entityName,\n      definition.selectId,\n      definition.entityDispatcherOptions\n    );\n    const selectors = this.entitySelectorsFactory.create<T>(\n      definition.metadata\n    );\n    const selectors$ = this.entitySelectors$Factory.create<T, S$>(\n      entityName,\n      selectors\n    );\n    return {\n      dispatcher,\n      entityName,\n      selectors,\n      selectors$,\n    };\n  }\n}\n"]}