{"version":3,"file":"entity-services.js","sourceRoot":"ng://@ngrx/data/","sources":["src/entity-services/entity-services.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAgBA,MAAM,OAAgB,cAAc;CAkDnC;;;;;;IA7CC,6CAAgE;;;;;IAGhE,sCAA6E;;;;;;IAa7E,yCAAsD;;;;;;;IAnBtD,0DAAwC;;;;;;;;IAWxC,gFAE8B;;;;;;;;;IAc9B,kFAEQ;;;;;;;;IAMR,oGAEQ;;;;;;;;IAMR,sGAGQ;;;;;;AAOV,gDAEC","sourcesContent":["import { Action, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { EntityAction } from '../actions/entity-action';\nimport { EntityCache } from '../reducers/entity-cache';\nimport { EntityCollectionService } from './entity-collection-service';\n\n// tslint:disable:member-ordering\n\n/**\n * Class-Interface for EntityCache and EntityCollection services.\n * Serves as an Angular provider token for this service class.\n * Includes a registry of EntityCollectionServices for all entity types.\n * Creates a new default EntityCollectionService for any entity type not in the registry.\n * Optionally register specialized EntityCollectionServices for individual types\n */\nexport abstract class EntityServices {\n  /** Dispatch any action to the store */\n  abstract dispatch(action: Action): void;\n\n  /** Observable of error EntityActions (e.g. QUERY_ALL_ERROR) for all entity types */\n  abstract readonly entityActionErrors$: Observable<EntityAction>;\n\n  /** Observable of the entire entity cache */\n  abstract readonly entityCache$: Observable<EntityCache> | Store<EntityCache>;\n\n  /** Get (or create) the singleton instance of an EntityCollectionService\n   * @param entityName {string} Name of the entity type of the service\n   */\n  abstract getEntityCollectionService<T = any>(\n    entityName: string\n  ): EntityCollectionService<T>;\n\n  /**\n   * Actions scanned by the store after it processed them with reducers.\n   * A replay observable of the most recent Action (not just EntityAction) reduced by the store.\n   */\n  abstract readonly reducedActions$: Observable<Action>;\n\n  // #region EntityCollectionService creation and registration API\n\n  /** Register an EntityCollectionService under its entity type name.\n   * Will replace a pre-existing service for that type.\n   * @param service {EntityCollectionService} The entity service\n   */\n  abstract registerEntityCollectionService<T>(\n    service: EntityCollectionService<T>\n  ): void;\n\n  /** Register entity services for several entity types at once.\n   * Will replace a pre-existing service for that type.\n   * @param entityCollectionServices Array of EntityCollectionServices to register\n   */\n  abstract registerEntityCollectionServices(\n    entityCollectionServices: EntityCollectionService<any>[]\n  ): void;\n\n  /** Register entity services for several entity types at once.\n   * Will replace a pre-existing service for that type.\n   * @param entityCollectionServiceMap Map of service-name to entity-collection-service\n   */\n  abstract registerEntityCollectionServices(\n    // tslint:disable-next-line:unified-signatures\n    entityCollectionServiceMap: EntityCollectionServiceMap\n  ): void;\n  // #endregion EntityCollectionService creation and registration API\n}\n\n/**\n * A map of service or entity names to their corresponding EntityCollectionServices.\n */\nexport interface EntityCollectionServiceMap {\n  [entityName: string]: EntityCollectionService<any>;\n}\n"]}