{"version":3,"file":"entity-services-base.js","sourceRoot":"ng://@ngrx/data/","sources":["src/entity-services/entity-services-base.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAW3C,OAAO,EAAE,sBAAsB,EAAE,MAAM,4BAA4B,CAAC;;;;;;;;;;;;;;;;;;;;;;AAyBpE,MAAM,OAAO,kBAAkB;;;;;;;;;;;IAQ7B,YAAoB,sBAA8C;QAA9C,2BAAsB,GAAtB,sBAAsB,CAAwB;;;;QAwCjD,6BAAwB,GAA+B,EAAE,CAAC;IAxCN,CAAC;;;;;;IAKtE,IAAI,mBAAmB;QACrB,OAAO,IAAI,CAAC,sBAAsB,CAAC,mBAAmB,CAAC;IACzD,CAAC;;;;;IAGD,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC;IAClD,CAAC;;;;;IAGD,IAAI,8BAA8B;QAChC,OAAO,IAAI,CAAC,sBAAsB,CAAC,8BAA8B,CAAC;IACpE,CAAC;;;;;;IAMD,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC;IACrD,CAAC;;;;;;IAGD,IAAc,KAAK;QACjB,OAAO,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC;IAC3C,CAAC;;;;;;;IAKD,QAAQ,CAAC,MAAc;QACrB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;;;;;;;;;;IAWS,6BAA6B,CAGrC,UAAkB;QAClB,OAAO,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAQ,UAAU,CAAC,CAAC;IACvE,CAAC;;;;;;;IAKD,0BAA0B,CAGxB,UAAkB;;YACd,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC;QACvD,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,IAAI,CAAC,6BAA6B,CAAQ,UAAU,CAAC,CAAC;YAChE,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC;SACrD;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;;;;;;;;;IAOD,+BAA+B,CAC7B,OAAmC,EACnC,WAAoB;QAEpB,IAAI,CAAC,wBAAwB,CAAC,WAAW,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC;IAC7E,CAAC;;;;;;;;IAQD,gCAAgC,CAC9B,wBAEkC;QAElC,IAAI,KAAK,CAAC,OAAO,CAAC,wBAAwB,CAAC,EAAE;YAC3C,wBAAwB,CAAC,OAAO;;;;YAAC,OAAO,CAAC,EAAE,CACzC,IAAI,CAAC,+BAA+B,CAAC,OAAO,CAAC,EAC9C,CAAC;SACH;aAAM;YACL,MAAM,CAAC,IAAI,CAAC,wBAAwB,IAAI,EAAE,CAAC,CAAC,OAAO;;;;YAAC,WAAW,CAAC,EAAE;gBAChE,IAAI,CAAC,+BAA+B,CAClC,wBAAwB,CAAC,WAAW,CAAC,EACrC,WAAW,CACZ,CAAC;YACJ,CAAC,EAAC,CAAC;SACJ;IACH,CAAC;;;YAlHF,UAAU;;;;YAxBF,sBAAsB;;;;;;;;IAyE7B,sDAA2E;;;;;IAxC/D,oDAAsD","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Action, Store } from '@ngrx/store';\n\nimport { Observable } from 'rxjs';\n\nimport { EntityAction } from '../actions/entity-action';\nimport { EntityCache } from '../reducers/entity-cache';\nimport { EntityCollectionService } from './entity-collection-service';\nimport { EntityCollectionServiceFactory } from './entity-collection-service-factory';\nimport { EntityCollectionServiceMap, EntityServices } from './entity-services';\nimport { EntitySelectors$ } from '../selectors/entity-selectors$';\nimport { EntityServicesElements } from './entity-services-elements';\n\n// tslint:disable:member-ordering\n\n/**\n * Base/default class of a central registry of EntityCollectionServices for all entity types.\n * Create your own subclass to add app-specific members for an improved developer experience.\n *\n * @example\n * export class EntityServices extends EntityServicesBase {\n *   constructor(entityServicesElements: EntityServicesElements) {\n *     super(entityServicesElements);\n *   }\n *   // Extend with well-known, app entity collection services\n *   // Convenience property to return a typed custom entity collection service\n *   get companyService() {\n *     return this.getEntityCollectionService<Model.Company>('Company') as CompanyService;\n *   }\n *   // Convenience dispatch methods\n *   clearCompany(companyId: string) {\n *     this.dispatch(new ClearCompanyAction(companyId));\n *   }\n * }\n */\n@Injectable()\nexport class EntityServicesBase implements EntityServices {\n  // Dear @ngrx/data developer: think hard before changing the constructor.\n  // Doing so will break apps that derive from this base class,\n  // and many apps will derive from this class.\n  //\n  // Do not give this constructor an implementation.\n  // Doing so makes it hard to mock classes that derive from this class.\n  // Use getter properties instead. For example, see entityCache$\n  constructor(private entityServicesElements: EntityServicesElements) {}\n\n  // #region EntityServicesElement-based properties\n\n  /** Observable of error EntityActions (e.g. QUERY_ALL_ERROR) for all entity types */\n  get entityActionErrors$(): Observable<EntityAction> {\n    return this.entityServicesElements.entityActionErrors$;\n  }\n\n  /** Observable of the entire entity cache */\n  get entityCache$(): Observable<EntityCache> | Store<EntityCache> {\n    return this.entityServicesElements.entityCache$;\n  }\n\n  /** Factory to create a default instance of an EntityCollectionService */\n  get entityCollectionServiceFactory(): EntityCollectionServiceFactory {\n    return this.entityServicesElements.entityCollectionServiceFactory;\n  }\n\n  /**\n   * Actions scanned by the store after it processed them with reducers.\n   * A replay observable of the most recent action reduced by the store.\n   */\n  get reducedActions$(): Observable<Action> {\n    return this.entityServicesElements.reducedActions$;\n  }\n\n  /** The ngrx store, scoped to the EntityCache */\n  protected get store(): Store<EntityCache> {\n    return this.entityServicesElements.store;\n  }\n\n  // #endregion EntityServicesElement-based properties\n\n  /** Dispatch any action to the store */\n  dispatch(action: Action) {\n    this.store.dispatch(action);\n  }\n\n  /** Registry of EntityCollectionService instances */\n  private readonly EntityCollectionServices: EntityCollectionServiceMap = {};\n\n  /**\n   * Create a new default instance of an EntityCollectionService.\n   * Prefer getEntityCollectionService() unless you really want a new default instance.\n   * This one will NOT be registered with EntityServices!\n   * @param entityName {string} Name of the entity type of the service\n   */\n  protected createEntityCollectionService<\n    T,\n    S$ extends EntitySelectors$<T> = EntitySelectors$<T>\n  >(entityName: string): EntityCollectionService<T> {\n    return this.entityCollectionServiceFactory.create<T, S$>(entityName);\n  }\n\n  /** Get (or create) the singleton instance of an EntityCollectionService\n   * @param entityName {string} Name of the entity type of the service\n   */\n  getEntityCollectionService<\n    T,\n    S$ extends EntitySelectors$<T> = EntitySelectors$<T>\n  >(entityName: string): EntityCollectionService<T> {\n    let service = this.EntityCollectionServices[entityName];\n    if (!service) {\n      service = this.createEntityCollectionService<T, S$>(entityName);\n      this.EntityCollectionServices[entityName] = service;\n    }\n    return service;\n  }\n\n  /** Register an EntityCollectionService under its entity type name.\n   * Will replace a pre-existing service for that type.\n   * @param service {EntityCollectionService} The entity service\n   * @param serviceName {string} optional service name to use instead of the service's entityName\n   */\n  registerEntityCollectionService<T>(\n    service: EntityCollectionService<T>,\n    serviceName?: string\n  ) {\n    this.EntityCollectionServices[serviceName || service.entityName] = service;\n  }\n\n  /**\n   * Register entity services for several entity types at once.\n   * Will replace a pre-existing service for that type.\n   * @param entityCollectionServices {EntityCollectionServiceMap | EntityCollectionService<any>[]}\n   * EntityCollectionServices to register, either as a map or an array\n   */\n  registerEntityCollectionServices(\n    entityCollectionServices:\n      | EntityCollectionServiceMap\n      | EntityCollectionService<any>[]\n  ): void {\n    if (Array.isArray(entityCollectionServices)) {\n      entityCollectionServices.forEach(service =>\n        this.registerEntityCollectionService(service)\n      );\n    } else {\n      Object.keys(entityCollectionServices || {}).forEach(serviceName => {\n        this.registerEntityCollectionService(\n          entityCollectionServices[serviceName],\n          serviceName\n        );\n      });\n    }\n  }\n}\n"]}