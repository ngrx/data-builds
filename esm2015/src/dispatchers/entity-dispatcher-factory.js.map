{"version":3,"file":"entity-dispatcher-factory.js","sourceRoot":"ng://@ngrx/data/","sources":["src/dispatchers/entity-dispatcher-factory.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAa,MAAM,eAAe,CAAC;AAC9D,OAAO,EAAU,KAAK,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAC;AAEnE,OAAO,EAAE,UAAU,EAAgB,MAAM,MAAM,CAAC;AAChD,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAE7C,OAAO,EAAE,sBAAsB,EAAE,MAAM,mCAAmC,CAAC;AAC3E,OAAO,EAAE,8BAA8B,EAAE,MAAM,qCAAqC,CAAC;AACrF,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AACrD,OAAO,EAAE,mBAAmB,EAAE,MAAM,kCAAkC,CAAC;AAEvE,OAAO,EAEL,2BAA2B,GAC5B,MAAM,oCAAoC,CAAC;AAE5C,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;;;;AAIhE,MAAM,OAAO,uBAAuB;;;;;;;;;IAQlC,YACU,mBAAwC,EACxC,KAAyB,EACzB,8BAA8D,EACvC,eAAmC,EAE1D,mBAAwC,EACxC,sBAA8C;QAN9C,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,UAAK,GAAL,KAAK,CAAoB;QACzB,mCAA8B,GAA9B,8BAA8B,CAAgC;QAG9D,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,2BAAsB,GAAtB,sBAAsB,CAAwB;QAEtD,uFAAuF;QACvF,sDAAsD;QACtD,wFAAwF;QACxF,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,wEAAwE;QACxE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;IACzD,CAAC;;;;;;;;;IAKD,MAAM;IACJ,8BAA8B;IAC9B,UAAkB;IAClB;;;OAGG;IACH,WAA0B,eAAe;IACzC;;OAEG;IACH,iBAA0D,EAAE;;;cAGtD,OAAO,mCACR,IAAI,CAAC,8BAA8B,GACnC,cAAc,CAClB;QACD,OAAO,IAAI,oBAAoB,CAC7B,UAAU,EACV,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,KAAK,EACV,QAAQ,EACR,OAAO,EACP,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,sBAAsB,CAC5B,CAAC;IACJ,CAAC;;;;IAED,WAAW;QACT,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC;;;YA7DF,UAAU;;;;YAVF,mBAAmB;YARX,KAAK;YAMb,8BAA8B;YAJ9B,UAAU,uBA6Bd,MAAM,SAAC,qBAAqB;4CAC5B,MAAM,SAAC,2BAA2B;YA3B9B,sBAAsB;;;;;;;;IAmB7B,kDAAoC;;;;;IACpC,iDAAqC;;;;;IAGnC,sDAAgD;;;;;IAChD,wCAAiC;;;;;IACjC,iEAAsE;;;;;IAEtE,sDACgD;;;;;IAChD,yDAAsD","sourcesContent":["import { Inject, Injectable, OnDestroy } from '@angular/core';\nimport { Action, Store, ScannedActionsSubject } from '@ngrx/store';\nimport { IdSelector } from '@ngrx/entity';\nimport { Observable, Subscription } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CorrelationIdGenerator } from '../utils/correlation-id-generator';\nimport { EntityDispatcherDefaultOptions } from './entity-dispatcher-default-options';\nimport { defaultSelectId } from '../utils/utilities';\nimport { EntityActionFactory } from '../actions/entity-action-factory';\nimport { EntityCache } from '../reducers/entity-cache';\nimport {\n  EntityCacheSelector,\n  ENTITY_CACHE_SELECTOR_TOKEN,\n} from '../selectors/entity-cache-selector';\nimport { EntityDispatcher } from './entity-dispatcher';\nimport { EntityDispatcherBase } from './entity-dispatcher-base';\n\n/** Creates EntityDispatchers for entity collections */\n@Injectable()\nexport class EntityDispatcherFactory implements OnDestroy {\n  /**\n   * Actions scanned by the store after it processed them with reducers.\n   * A replay observable of the most recent action reduced by the store.\n   */\n  reducedActions$: Observable<Action>;\n  private raSubscription: Subscription;\n\n  constructor(\n    private entityActionFactory: EntityActionFactory,\n    private store: Store<EntityCache>,\n    private entityDispatcherDefaultOptions: EntityDispatcherDefaultOptions,\n    @Inject(ScannedActionsSubject) scannedActions$: Observable<Action>,\n    @Inject(ENTITY_CACHE_SELECTOR_TOKEN)\n    private entityCacheSelector: EntityCacheSelector,\n    private correlationIdGenerator: CorrelationIdGenerator\n  ) {\n    // Replay because sometimes in tests will fake data service with synchronous observable\n    // which makes subscriber miss the dispatched actions.\n    // Of course that's a testing mistake. But easy to forget, leading to painful debugging.\n    this.reducedActions$ = scannedActions$.pipe(shareReplay(1));\n    // Start listening so late subscriber won't miss the most recent action.\n    this.raSubscription = this.reducedActions$.subscribe();\n  }\n\n  /**\n   * Create an `EntityDispatcher` for an entity type `T` and store.\n   */\n  create<T>(\n    /** Name of the entity type */\n    entityName: string,\n    /**\n     * Function that returns the primary key for an entity `T`.\n     * Usually acquired from `EntityDefinition` metadata.\n     */\n    selectId: IdSelector<T> = defaultSelectId,\n    /** Defaults for options that influence dispatcher behavior such as whether\n     * `add()` is optimistic or pessimistic;\n     */\n    defaultOptions: Partial<EntityDispatcherDefaultOptions> = {}\n  ): EntityDispatcher<T> {\n    // merge w/ defaultOptions with injected defaults\n    const options: EntityDispatcherDefaultOptions = {\n      ...this.entityDispatcherDefaultOptions,\n      ...defaultOptions,\n    };\n    return new EntityDispatcherBase<T>(\n      entityName,\n      this.entityActionFactory,\n      this.store,\n      selectId,\n      options,\n      this.reducedActions$,\n      this.entityCacheSelector,\n      this.correlationIdGenerator\n    );\n  }\n\n  ngOnDestroy() {\n    this.raSubscription.unsubscribe();\n  }\n}\n"]}