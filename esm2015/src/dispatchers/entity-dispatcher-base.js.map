{"version":3,"file":"entity-dispatcher-base.js","sourceRoot":"ng://@ngrx/data/","sources":["src/dispatchers/entity-dispatcher-base.ts"],"names":[],"mappings":"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","sourcesContent":["import { Action, createSelector, Store } from '@ngrx/store';\nimport { IdSelector, Update } from '@ngrx/entity';\n\nimport { Observable, of, throwError } from 'rxjs';\nimport {\n  filter,\n  map,\n  mergeMap,\n  shareReplay,\n  withLatestFrom,\n  take,\n} from 'rxjs/operators';\n\nimport { CorrelationIdGenerator } from '../utils/correlation-id-generator';\nimport { defaultSelectId, toUpdateFactory } from '../utils/utilities';\nimport { EntityAction, EntityActionOptions } from '../actions/entity-action';\nimport { EntityActionFactory } from '../actions/entity-action-factory';\nimport { EntityActionGuard } from '../actions/entity-action-guard';\nimport { EntityCache } from '../reducers/entity-cache';\nimport { EntityCacheSelector } from '../selectors/entity-cache-selector';\nimport { EntityCollection } from '../reducers/entity-collection';\nimport { EntityCommands } from './entity-commands';\nimport { EntityDispatcher, PersistanceCanceled } from './entity-dispatcher';\nimport { EntityDispatcherDefaultOptions } from './entity-dispatcher-default-options';\nimport { EntityOp, OP_ERROR, OP_SUCCESS } from '../actions/entity-op';\nimport { MergeStrategy } from '../actions/merge-strategy';\nimport { QueryParams } from '../dataservices/interfaces';\nimport { UpdateResponseData } from '../actions/update-response-data';\n\n/**\n * Dispatches EntityCollection actions to their reducers and effects (default implementation).\n * All save commands rely on an Ngrx Effect such as `EntityEffects.persist$`.\n */\nexport class EntityDispatcherBase<T> implements EntityDispatcher<T> {\n  /** Utility class with methods to validate EntityAction payloads.*/\n  guard: EntityActionGuard<T>;\n\n  private entityCollection$: Observable<EntityCollection<T>>;\n\n  /**\n   * Convert an entity (or partial entity) into the `Update<T>` object\n   * `update...` and `upsert...` methods take `Update<T>` args\n   */\n  toUpdate: (entity: Partial<T>) => Update<T>;\n\n  constructor(\n    /** Name of the entity type for which entities are dispatched */\n    public entityName: string,\n    /** Creates an {EntityAction} */\n    public entityActionFactory: EntityActionFactory,\n    /** The store, scoped to the EntityCache */\n    public store: Store<EntityCache>,\n    /** Returns the primary key (id) of this entity */\n    public selectId: IdSelector<T> = defaultSelectId,\n    /**\n     * Dispatcher options configure dispatcher behavior such as\n     * whether add is optimistic or pessimistic by default.\n     */\n    private defaultDispatcherOptions: EntityDispatcherDefaultOptions,\n    /** Actions scanned by the store after it processed them with reducers. */\n    private reducedActions$: Observable<Action>,\n    /** Store selector for the EntityCache */\n    entityCacheSelector: EntityCacheSelector,\n    /** Generates correlation ids for query and save methods */\n    private correlationIdGenerator: CorrelationIdGenerator\n  ) {\n    this.guard = new EntityActionGuard(entityName, selectId);\n    this.toUpdate = toUpdateFactory<T>(selectId);\n\n    const collectionSelector = createSelector(\n      entityCacheSelector,\n      cache => cache[entityName] as EntityCollection<T>\n    );\n    this.entityCollection$ = store.select(collectionSelector);\n  }\n\n  /**\n   * Create an {EntityAction} for this entity type.\n   * @param entityOp {EntityOp} the entity operation\n   * @param [data] the action data\n   * @param [options] additional options\n   * @returns the EntityAction\n   */\n  createEntityAction<P = any>(\n    entityOp: EntityOp,\n    data?: P,\n    options?: EntityActionOptions\n  ): EntityAction<P> {\n    return this.entityActionFactory.create({\n      entityName: this.entityName,\n      entityOp,\n      data,\n      ...options,\n    });\n  }\n\n  /**\n   * Create an {EntityAction} for this entity type and\n   * dispatch it immediately to the store.\n   * @param op {EntityOp} the entity operation\n   * @param [data] the action data\n   * @param [options] additional options\n   * @returns the dispatched EntityAction\n   */\n  createAndDispatch<P = any>(\n    op: EntityOp,\n    data?: P,\n    options?: EntityActionOptions\n  ): EntityAction<P> {\n    const action = this.createEntityAction(op, data, options);\n    this.dispatch(action);\n    return action;\n  }\n\n  /**\n   * Dispatch an Action to the store.\n   * @param action the Action\n   * @returns the dispatched Action\n   */\n  dispatch(action: Action): Action {\n    this.store.dispatch(action);\n    return action;\n  }\n\n  // #region Query and save operations\n\n  /**\n   * Dispatch action to save a new entity to remote storage.\n   * @param entity entity to add, which may omit its key if pessimistic and the server creates the key;\n   * must have a key if optimistic save.\n   * @returns A terminating Observable of the entity\n   * after server reports successful save or the save error.\n   */\n  add(entity: T, options?: EntityActionOptions): Observable<T> {\n    options = this.setSaveEntityActionOptions(\n      options,\n      this.defaultDispatcherOptions.optimisticAdd\n    );\n    const action = this.createEntityAction(\n      EntityOp.SAVE_ADD_ONE,\n      entity,\n      options\n    );\n    if (options.isOptimistic) {\n      this.guard.mustBeEntity(action);\n    }\n    this.dispatch(action);\n    return this.getResponseData$<T>(options.correlationId).pipe(\n      // Use the returned entity data's id to get the entity from the collection\n      // as it might be different from the entity returned from the server.\n      withLatestFrom(this.entityCollection$),\n      map(([e, collection]) => collection.entities[this.selectId(e)]!),\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * Dispatch action to cancel the persistence operation (query or save).\n   * Will cause save observable to error with a PersistenceCancel error.\n   * Caller is responsible for undoing changes in cache from pending optimistic save\n   * @param correlationId The correlation id for the corresponding EntityAction\n   * @param [reason] explains why canceled and by whom.\n   */\n  cancel(\n    correlationId: any,\n    reason?: string,\n    options?: EntityActionOptions\n  ): void {\n    if (!correlationId) {\n      throw new Error('Missing correlationId');\n    }\n    this.createAndDispatch(EntityOp.CANCEL_PERSIST, reason, { correlationId });\n  }\n\n  /**\n   * Dispatch action to delete entity from remote storage by key.\n   * @param key The primary key of the entity to remove\n   * @returns A terminating Observable of the deleted key\n   * after server reports successful save or the save error.\n   */\n  delete(entity: T, options?: EntityActionOptions): Observable<number | string>;\n\n  /**\n   * Dispatch action to delete entity from remote storage by key.\n   * @param key The entity to delete\n   * @returns A terminating Observable of the deleted key\n   * after server reports successful save or the save error.\n   */\n  delete(\n    key: number | string,\n    options?: EntityActionOptions\n  ): Observable<number | string>;\n  delete(\n    arg: number | string | T,\n    options?: EntityActionOptions\n  ): Observable<number | string> {\n    options = this.setSaveEntityActionOptions(\n      options,\n      this.defaultDispatcherOptions.optimisticDelete\n    );\n    const key = this.getKey(arg);\n    const action = this.createEntityAction(\n      EntityOp.SAVE_DELETE_ONE,\n      key,\n      options\n    );\n    this.guard.mustBeKey(action);\n    this.dispatch(action);\n    return this.getResponseData$<number | string>(options.correlationId).pipe(\n      map(() => key),\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * Dispatch action to query remote storage for all entities and\n   * merge the queried entities into the cached collection.\n   * @returns A terminating Observable of the queried entities that are in the collection\n   * after server reports success query or the query error.\n   * @see load()\n   */\n  getAll(options?: EntityActionOptions): Observable<T[]> {\n    options = this.setQueryEntityActionOptions(options);\n    const action = this.createEntityAction(EntityOp.QUERY_ALL, null, options);\n    this.dispatch(action);\n    return this.getResponseData$<T[]>(options.correlationId).pipe(\n      // Use the returned entity ids to get the entities from the collection\n      // as they might be different from the entities returned from the server\n      // because of unsaved changes (deletes or updates).\n      withLatestFrom(this.entityCollection$),\n      map(([entities, collection]) =>\n        entities.reduce(\n          (acc, e) => {\n            const entity = collection.entities[this.selectId(e)];\n            if (entity) {\n              acc.push(entity); // only return an entity found in the collection\n            }\n            return acc;\n          },\n          [] as T[]\n        )\n      ),\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * Dispatch action to query remote storage for the entity with this primary key.\n   * If the server returns an entity,\n   * merge it into the cached collection.\n   * @returns A terminating Observable of the collection\n   * after server reports successful query or the query error.\n   */\n  getByKey(key: any, options?: EntityActionOptions): Observable<T> {\n    options = this.setQueryEntityActionOptions(options);\n    const action = this.createEntityAction(EntityOp.QUERY_BY_KEY, key, options);\n    this.dispatch(action);\n    return this.getResponseData$<T>(options.correlationId).pipe(\n      // Use the returned entity data's id to get the entity from the collection\n      // as it might be different from the entity returned from the server.\n      withLatestFrom(this.entityCollection$),\n      map(\n        ([entity, collection]) => collection.entities[this.selectId(entity)]!\n      ),\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * Dispatch action to query remote storage for the entities that satisfy a query expressed\n   * with either a query parameter map or an HTTP URL query string,\n   * and merge the results into the cached collection.\n   * @param queryParams the query in a form understood by the server\n   * @returns A terminating Observable of the queried entities\n   * after server reports successful query or the query error.\n   */\n  getWithQuery(\n    queryParams: QueryParams | string,\n    options?: EntityActionOptions\n  ): Observable<T[]> {\n    options = this.setQueryEntityActionOptions(options);\n    const action = this.createEntityAction(\n      EntityOp.QUERY_MANY,\n      queryParams,\n      options\n    );\n    this.dispatch(action);\n    return this.getResponseData$<T[]>(options.correlationId).pipe(\n      // Use the returned entity ids to get the entities from the collection\n      // as they might be different from the entities returned from the server\n      // because of unsaved changes (deletes or updates).\n      withLatestFrom(this.entityCollection$),\n      map(([entities, collection]) =>\n        entities.reduce(\n          (acc, e) => {\n            const entity = collection.entities[this.selectId(e)];\n            if (entity) {\n              acc.push(entity); // only return an entity found in the collection\n            }\n            return acc;\n          },\n          [] as T[]\n        )\n      ),\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * Dispatch action to query remote storage for all entities and\n   * completely replace the cached collection with the queried entities.\n   * @returns A terminating Observable of the entities in the collection\n   * after server reports successful query or the query error.\n   * @see getAll\n   */\n  load(options?: EntityActionOptions): Observable<T[]> {\n    options = this.setQueryEntityActionOptions(options);\n    const action = this.createEntityAction(EntityOp.QUERY_LOAD, null, options);\n    this.dispatch(action);\n    return this.getResponseData$<T[]>(options.correlationId).pipe(\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * Dispatch action to save the updated entity (or partial entity) in remote storage.\n   * The update entity may be partial (but must have its key)\n   * in which case it patches the existing entity.\n   * @param entity update entity, which might be a partial of T but must at least have its key.\n   * @returns A terminating Observable of the updated entity\n   * after server reports successful save or the save error.\n   */\n  update(entity: Partial<T>, options?: EntityActionOptions): Observable<T> {\n    // update entity might be a partial of T but must at least have its key.\n    // pass the Update<T> structure as the payload\n    const update = this.toUpdate(entity);\n    options = this.setSaveEntityActionOptions(\n      options,\n      this.defaultDispatcherOptions.optimisticUpdate\n    );\n    const action = this.createEntityAction(\n      EntityOp.SAVE_UPDATE_ONE,\n      update,\n      options\n    );\n    if (options.isOptimistic) {\n      this.guard.mustBeUpdate(action);\n    }\n    this.dispatch(action);\n    return this.getResponseData$<UpdateResponseData<T>>(\n      options.correlationId\n    ).pipe(\n      // Use the update entity data id to get the entity from the collection\n      // as might be different from the entity returned from the server\n      // because the id changed or there are unsaved changes.\n      map(updateData => updateData.changes),\n      withLatestFrom(this.entityCollection$),\n      map(([e, collection]) => collection.entities[this.selectId(e as T)]!),\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * Dispatch action to save a new or existing entity to remote storage.\n   * Only dispatch this action if your server supports upsert.\n   * @param entity entity to add, which may omit its key if pessimistic and the server creates the key;\n   * must have a key if optimistic save.\n   * @returns A terminating Observable of the entity\n   * after server reports successful save or the save error.\n   */\n  upsert(entity: T, options?: EntityActionOptions): Observable<T> {\n    options = this.setSaveEntityActionOptions(\n      options,\n      this.defaultDispatcherOptions.optimisticUpsert\n    );\n    const action = this.createEntityAction(\n      EntityOp.SAVE_UPSERT_ONE,\n      entity,\n      options\n    );\n    if (options.isOptimistic) {\n      this.guard.mustBeEntity(action);\n    }\n    this.dispatch(action);\n    return this.getResponseData$<T>(options.correlationId).pipe(\n      // Use the returned entity data's id to get the entity from the collection\n      // as it might be different from the entity returned from the server.\n      withLatestFrom(this.entityCollection$),\n      map(([e, collection]) => collection.entities[this.selectId(e)]!),\n      shareReplay(1)\n    );\n  }\n  // #endregion Query and save operations\n\n  // #region Cache-only operations that do not update remote storage\n\n  // Unguarded for performance.\n  // EntityCollectionReducer<T> runs a guard (which throws)\n  // Developer should understand cache-only methods well enough\n  // to call them with the proper entities.\n  // May reconsider and add guards in future.\n\n  /**\n   * Replace all entities in the cached collection.\n   * Does not save to remote storage.\n   */\n  addAllToCache(entities: T[], options?: EntityActionOptions): void {\n    this.createAndDispatch(EntityOp.ADD_ALL, entities, options);\n  }\n\n  /**\n   * Add a new entity directly to the cache.\n   * Does not save to remote storage.\n   * Ignored if an entity with the same primary key is already in cache.\n   */\n  addOneToCache(entity: T, options?: EntityActionOptions): void {\n    this.createAndDispatch(EntityOp.ADD_ONE, entity, options);\n  }\n\n  /**\n   * Add multiple new entities directly to the cache.\n   * Does not save to remote storage.\n   * Entities with primary keys already in cache are ignored.\n   */\n  addManyToCache(entities: T[], options?: EntityActionOptions): void {\n    this.createAndDispatch(EntityOp.ADD_MANY, entities, options);\n  }\n\n  /** Clear the cached entity collection */\n  clearCache(options?: EntityActionOptions): void {\n    this.createAndDispatch(EntityOp.REMOVE_ALL, undefined, options);\n  }\n\n  /**\n   * Remove an entity directly from the cache.\n   * Does not delete that entity from remote storage.\n   * @param entity The entity to remove\n   */\n  removeOneFromCache(entity: T, options?: EntityActionOptions): void;\n\n  /**\n   * Remove an entity directly from the cache.\n   * Does not delete that entity from remote storage.\n   * @param key The primary key of the entity to remove\n   */\n  removeOneFromCache(key: number | string, options?: EntityActionOptions): void;\n  removeOneFromCache(\n    arg: (number | string) | T,\n    options?: EntityActionOptions\n  ): void {\n    this.createAndDispatch(EntityOp.REMOVE_ONE, this.getKey(arg), options);\n  }\n\n  /**\n   * Remove multiple entities directly from the cache.\n   * Does not delete these entities from remote storage.\n   * @param entity The entities to remove\n   */\n  removeManyFromCache(entities: T[], options?: EntityActionOptions): void;\n\n  /**\n   * Remove multiple entities directly from the cache.\n   * Does not delete these entities from remote storage.\n   * @param keys The primary keys of the entities to remove\n   */\n  removeManyFromCache(\n    keys: (number | string)[],\n    options?: EntityActionOptions\n  ): void;\n  removeManyFromCache(\n    args: (number | string)[] | T[],\n    options?: EntityActionOptions\n  ): void {\n    if (!args || args.length === 0) {\n      return;\n    }\n    const keys =\n      typeof args[0] === 'object'\n        ? // if array[0] is a key, assume they're all keys\n          (<T[]>args).map(arg => this.getKey(arg))\n        : args;\n    this.createAndDispatch(EntityOp.REMOVE_MANY, keys, options);\n  }\n\n  /**\n   * Update a cached entity directly.\n   * Does not update that entity in remote storage.\n   * Ignored if an entity with matching primary key is not in cache.\n   * The update entity may be partial (but must have its key)\n   * in which case it patches the existing entity.\n   */\n  updateOneInCache(entity: Partial<T>, options?: EntityActionOptions): void {\n    // update entity might be a partial of T but must at least have its key.\n    // pass the Update<T> structure as the payload\n    const update: Update<T> = this.toUpdate(entity);\n    this.createAndDispatch(EntityOp.UPDATE_ONE, update, options);\n  }\n\n  /**\n   * Update multiple cached entities directly.\n   * Does not update these entities in remote storage.\n   * Entities whose primary keys are not in cache are ignored.\n   * Update entities may be partial but must at least have their keys.\n   * such partial entities patch their cached counterparts.\n   */\n  updateManyInCache(\n    entities: Partial<T>[],\n    options?: EntityActionOptions\n  ): void {\n    if (!entities || entities.length === 0) {\n      return;\n    }\n    const updates: Update<T>[] = entities.map(entity => this.toUpdate(entity));\n    this.createAndDispatch(EntityOp.UPDATE_MANY, updates, options);\n  }\n\n  /**\n   * Add or update a new entity directly to the cache.\n   * Does not save to remote storage.\n   * Upsert entity might be a partial of T but must at least have its key.\n   * Pass the Update<T> structure as the payload\n   */\n  upsertOneInCache(entity: Partial<T>, options?: EntityActionOptions): void {\n    this.createAndDispatch(EntityOp.UPSERT_ONE, entity, options);\n  }\n\n  /**\n   * Add or update multiple cached entities directly.\n   * Does not save to remote storage.\n   */\n  upsertManyInCache(\n    entities: Partial<T>[],\n    options?: EntityActionOptions\n  ): void {\n    if (!entities || entities.length === 0) {\n      return;\n    }\n    this.createAndDispatch(EntityOp.UPSERT_MANY, entities, options);\n  }\n\n  /**\n   * Set the pattern that the collection's filter applies\n   * when using the `filteredEntities` selector.\n   */\n  setFilter(pattern: any): void {\n    this.createAndDispatch(EntityOp.SET_FILTER, pattern);\n  }\n\n  /** Set the loaded flag */\n  setLoaded(isLoaded: boolean): void {\n    this.createAndDispatch(EntityOp.SET_LOADED, !!isLoaded);\n  }\n\n  /** Set the loading flag */\n  setLoading(isLoading: boolean): void {\n    this.createAndDispatch(EntityOp.SET_LOADING, !!isLoading);\n  }\n  // #endregion Cache-only operations that do not update remote storage\n\n  // #region private helpers\n\n  /** Get key from entity (unless arg is already a key) */\n  private getKey(arg: number | string | T) {\n    return typeof arg === 'object'\n      ? this.selectId(arg)\n      : (arg as number | string);\n  }\n\n  /**\n   * Return Observable of data from the server-success EntityAction with\n   * the given Correlation Id, after that action was processed by the ngrx store.\n   * or else put the server error on the Observable error channel.\n   * @param crid The correlationId for both the save and response actions.\n   */\n  private getResponseData$<D = any>(crid: any): Observable<D> {\n    /**\n     * reducedActions$ must be replay observable of the most recent action reduced by the store.\n     * because the response action might have been dispatched to the store\n     * before caller had a chance to subscribe.\n     */\n    return this.reducedActions$.pipe(\n      filter((act: any) => !!act.payload),\n      filter((act: EntityAction) => {\n        const { correlationId, entityName, entityOp } = act.payload;\n        return (\n          entityName === this.entityName &&\n          correlationId === crid &&\n          (entityOp.endsWith(OP_SUCCESS) ||\n            entityOp.endsWith(OP_ERROR) ||\n            entityOp === EntityOp.CANCEL_PERSIST)\n        );\n      }),\n      take(1),\n      mergeMap(act => {\n        const { entityOp } = act.payload;\n        return entityOp === EntityOp.CANCEL_PERSIST\n          ? throwError(new PersistanceCanceled(act.payload.data))\n          : entityOp.endsWith(OP_SUCCESS)\n            ? of(act.payload.data as D)\n            : throwError(act.payload.data.error);\n      })\n    );\n  }\n\n  private setQueryEntityActionOptions(\n    options?: EntityActionOptions\n  ): EntityActionOptions {\n    options = options || {};\n    const correlationId =\n      options.correlationId == null\n        ? this.correlationIdGenerator.next()\n        : options.correlationId;\n    return { ...options, correlationId };\n  }\n\n  private setSaveEntityActionOptions(\n    options?: EntityActionOptions,\n    defaultOptimism?: boolean\n  ): EntityActionOptions {\n    options = options || {};\n    const correlationId =\n      options.correlationId == null\n        ? this.correlationIdGenerator.next()\n        : options.correlationId;\n    const isOptimistic =\n      options.isOptimistic == null\n        ? defaultOptimism || false\n        : options.isOptimistic === true;\n    return { ...options, correlationId, isOptimistic };\n  }\n  // #endregion private helpers\n}\n"]}