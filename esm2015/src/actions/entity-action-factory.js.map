{"version":3,"file":"entity-action-factory.js","sourceRoot":"ng://@ngrx/data/","sources":["src/actions/entity-action-factory.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAS3C,MAAM,OAAO,mBAAmB;;;;;;;;;;IAwB9B,MAAM,CACJ,aAA8C,EAC9C,QAAmB,EACnB,IAAQ,EACR,OAA6B;;cAEvB,OAAO,GACX,OAAO,aAAa,KAAK,QAAQ;YAC/B,CAAC,CAAC,CAAC,mDACI,CAAC,OAAO,IAAI,EAAE,CAAC,KAClB,UAAU,EAAE,aAAa,EACzB,QAAQ;gBACR,IAAI,KACqB,CAAC;YAC9B,CAAC,CAAC,aAAa;QACnB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;;;;;;;;;IAOS,UAAU,CAAU,OAA+B;cACrD,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,OAAO;QAC7C,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACvD;QACD,IAAI,QAAQ,IAAI,IAAI,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;SACpD;;cACK,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,GAAG,IAAI,UAAU,CAAC;QAC/D,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IAC3B,CAAC;;;;;;;;IAOD,gBAAgB,CACd,IAAkB,EAClB,aAA8C;QAE9C,OAAO,IAAI,CAAC,MAAM,iCAAM,IAAI,CAAC,OAAO,GAAK,aAAa,EAAG,CAAC;IAC5D,CAAC;;;;;;IAED,gBAAgB,CAAC,EAAU,EAAE,GAAW;QACtC,OAAO,IAAI,GAAG,KAAK,EAAE,EAAE,CAAC;QACxB,sEAAsE;IACxE,CAAC;;;YA3EF,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { EntityOp } from './entity-op';\nimport {\n  EntityAction,\n  EntityActionOptions,\n  EntityActionPayload,\n} from './entity-action';\n@Injectable()\nexport class EntityActionFactory {\n  /**\n   * Create an EntityAction to perform an operation (op) for a particular entity type\n   * (entityName) with optional data and other optional flags\n   * @param entityName Name of the entity type\n   * @param entityOp Operation to perform (EntityOp)\n   * @param [data] data for the operation\n   * @param [options] additional options\n   */\n  create<P = any>(\n    entityName: string,\n    entityOp: EntityOp,\n    data?: P,\n    options?: EntityActionOptions\n  ): EntityAction<P>;\n\n  /**\n   * Create an EntityAction to perform an operation (op) for a particular entity type\n   * (entityName) with optional data and other optional flags\n   * @param payload Defines the EntityAction and its options\n   */\n  create<P = any>(payload: EntityActionPayload<P>): EntityAction<P>;\n\n  // polymorphic create for the two signatures\n  create<P = any>(\n    nameOrPayload: EntityActionPayload<P> | string,\n    entityOp?: EntityOp,\n    data?: P,\n    options?: EntityActionOptions\n  ): EntityAction<P> {\n    const payload: EntityActionPayload<P> =\n      typeof nameOrPayload === 'string'\n        ? ({\n            ...(options || {}),\n            entityName: nameOrPayload,\n            entityOp,\n            data,\n          } as EntityActionPayload<P>)\n        : nameOrPayload;\n    return this.createCore(payload);\n  }\n\n  /**\n   * Create an EntityAction to perform an operation (op) for a particular entity type\n   * (entityName) with optional data and other optional flags\n   * @param payload Defines the EntityAction and its options\n   */\n  protected createCore<P = any>(payload: EntityActionPayload<P>) {\n    const { entityName, entityOp, tag } = payload;\n    if (!entityName) {\n      throw new Error('Missing entity name for new action');\n    }\n    if (entityOp == null) {\n      throw new Error('Missing EntityOp for new action');\n    }\n    const type = this.formatActionType(entityOp, tag || entityName);\n    return { type, payload };\n  }\n\n  /**\n   * Create an EntityAction from another EntityAction, replacing properties with those from newPayload;\n   * @param from Source action that is the base for the new action\n   * @param newProperties New EntityAction properties that replace the source action properties\n   */\n  createFromAction<P = any>(\n    from: EntityAction,\n    newProperties: Partial<EntityActionPayload<P>>\n  ): EntityAction<P> {\n    return this.create({ ...from.payload, ...newProperties });\n  }\n\n  formatActionType(op: string, tag: string) {\n    return `[${tag}] ${op}`;\n    // return `${op} [${tag}]`.toUpperCase(); // example of an alternative\n  }\n}\n"]}