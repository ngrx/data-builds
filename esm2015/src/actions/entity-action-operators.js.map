{"version":3,"file":"entity-action-operators.js","sourceRoot":"ng://@ngrx/data/","sources":["src/actions/entity-action-operators.ts"],"names":[],"mappings":";;;;;AACA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAIxC,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;;;;;;AAmBjD,MAAM,UAAU,UAAU,CACxB,GAAG,gBAAuB;;UAEpB,GAAG,GAAa,WAAW,CAAC,gBAAgB,CAAC;IACnD,QAAQ,GAAG,CAAC,MAAM,EAAE;QAClB,KAAK,CAAC;YACJ,OAAO,MAAM;;;;YACX,CAAC,MAAoB,EAAe,EAAE,CACpC,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,EACpD,CAAC;QACJ,KAAK,CAAC;;kBACE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;YACjB,OAAO,MAAM;;;;YACX,CAAC,MAAoB,EAAe,EAAE,CACpC,MAAM,CAAC,OAAO,IAAI,EAAE,KAAK,MAAM,CAAC,OAAO,CAAC,QAAQ,EACnD,CAAC;QACJ;YACE,OAAO,MAAM;;;;YACX,CAAC,MAAoB,EAAe,EAAE;;sBAC9B,QAAQ,GAAG,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ;gBAC1D,OAAO,QAAQ,IAAI,GAAG,CAAC,IAAI;;;;gBAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,EAAC,CAAC;YACnD,CAAC,EACF,CAAC;KACL;AACH,CAAC;;;;;;AAoBD,MAAM,UAAU,YAAY,CAC1B,GAAG,kBAAyB;;UAEtB,KAAK,GAAa,WAAW,CAAC,kBAAkB,CAAC;IACvD,QAAQ,KAAK,CAAC,MAAM,EAAE;QACpB,KAAK,CAAC;YACJ,OAAO,MAAM;;;;YACX,CAAC,MAAoB,EAAe,EAAE,CACpC,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,IAAI,IAAI,EACtD,CAAC;QACJ,KAAK,CAAC;;kBACE,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC;YACrB,OAAO,MAAM;;;;YACX,CAAC,MAAoB,EAAe,EAAE,CACpC,MAAM,CAAC,OAAO,IAAI,IAAI,KAAK,MAAM,CAAC,OAAO,CAAC,UAAU,EACvD,CAAC;QACJ;YACE,OAAO,MAAM;;;;YACX,CAAC,MAAoB,EAAe,EAAE;;sBAC9B,UAAU,GAAG,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU;gBAC9D,OAAO,CAAC,CAAC,UAAU,IAAI,KAAK,CAAC,IAAI;;;;gBAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,UAAU,EAAC,CAAC;YAC3D,CAAC,EACF,CAAC;KACL;AACH,CAAC","sourcesContent":["import { OperatorFunction } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { EntityAction } from './entity-action';\nimport { EntityOp } from './entity-op';\nimport { flattenArgs } from '../utils/utilities';\n\n/**\n * Select actions concerning one of the allowed Entity operations\n * @param allowedEntityOps Entity operations (e.g, EntityOp.QUERY_ALL) whose actions should be selected\n * Example:\n * ```\n *  this.actions.pipe(ofEntityOp(EntityOp.QUERY_ALL, EntityOp.QUERY_MANY), ...)\n *  this.actions.pipe(ofEntityOp(...queryOps), ...)\n *  this.actions.pipe(ofEntityOp(queryOps), ...)\n *  this.actions.pipe(ofEntityOp(), ...) // any action with a defined `entityOp` property\n * ```\n */\nexport function ofEntityOp<T extends EntityAction>(\n  allowedOps: string[] | EntityOp[]\n): OperatorFunction<EntityAction, T>;\nexport function ofEntityOp<T extends EntityAction>(\n  ...allowedOps: (string | EntityOp)[]\n): OperatorFunction<EntityAction, T>;\nexport function ofEntityOp<T extends EntityAction>(\n  ...allowedEntityOps: any[]\n): OperatorFunction<EntityAction, T> {\n  const ops: string[] = flattenArgs(allowedEntityOps);\n  switch (ops.length) {\n    case 0:\n      return filter(\n        (action: EntityAction): action is T =>\n          action.payload && action.payload.entityOp != null\n      );\n    case 1:\n      const op = ops[0];\n      return filter(\n        (action: EntityAction): action is T =>\n          action.payload && op === action.payload.entityOp\n      );\n    default:\n      return filter(\n        (action: EntityAction): action is T => {\n          const entityOp = action.payload && action.payload.entityOp;\n          return entityOp && ops.some(o => o === entityOp);\n        }\n      );\n  }\n}\n\n/**\n * Select actions concerning one of the allowed Entity types\n * @param allowedEntityNames Entity-type names (e.g, 'Hero') whose actions should be selected\n * Example:\n * ```\n *  this.actions.pipe(ofEntityType(), ...) // ayn EntityAction with a defined entity type property\n *  this.actions.pipe(ofEntityType('Hero'), ...) // EntityActions for the Hero entity\n *  this.actions.pipe(ofEntityType('Hero', 'Villain', 'Sidekick'), ...)\n *  this.actions.pipe(ofEntityType(...theChosen), ...)\n *  this.actions.pipe(ofEntityType(theChosen), ...)\n * ```\n */\nexport function ofEntityType<T extends EntityAction>(\n  allowedEntityNames?: string[]\n): OperatorFunction<EntityAction, T>;\nexport function ofEntityType<T extends EntityAction>(\n  ...allowedEntityNames: string[]\n): OperatorFunction<EntityAction, T>;\nexport function ofEntityType<T extends EntityAction>(\n  ...allowedEntityNames: any[]\n): OperatorFunction<EntityAction, T> {\n  const names: string[] = flattenArgs(allowedEntityNames);\n  switch (names.length) {\n    case 0:\n      return filter(\n        (action: EntityAction): action is T =>\n          action.payload && action.payload.entityName != null\n      );\n    case 1:\n      const name = names[0];\n      return filter(\n        (action: EntityAction): action is T =>\n          action.payload && name === action.payload.entityName\n      );\n    default:\n      return filter(\n        (action: EntityAction): action is T => {\n          const entityName = action.payload && action.payload.entityName;\n          return !!entityName && names.some(n => n === entityName);\n        }\n      );\n  }\n}\n"]}