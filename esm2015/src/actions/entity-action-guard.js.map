{"version":3,"file":"entity-action-guard.js","sourceRoot":"ng://@ngrx/data/","sources":["src/actions/entity-action-guard.ts"],"names":[],"mappings":"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","sourcesContent":["import { IdSelector, Update } from '@ngrx/entity';\n\nimport { EntityAction } from './entity-action';\nimport { UpdateResponseData } from '../actions/update-response-data';\n\n/**\n * Guard methods that ensure EntityAction payload is as expected.\n * Each method returns that payload if it passes the guard or\n * throws an error.\n */\nexport class EntityActionGuard<T> {\n  constructor(private entityName: string, private selectId: IdSelector<T>) {}\n\n  /** Throw if the action payload is not an entity with a valid key */\n  mustBeEntity(action: EntityAction<T>): T {\n    const data = this.extractData(action);\n    if (!data) {\n      return this.throwError(action, `should have a single entity.`);\n    }\n    const id = this.selectId(data);\n    if (this.isNotKeyType(id)) {\n      this.throwError(action, `has a missing or invalid entity key (id)`);\n    }\n    return data as T;\n  }\n\n  /** Throw if the action payload is not an array of entities with valid keys */\n  mustBeEntities(action: EntityAction<T[]>): T[] {\n    const data = this.extractData(action);\n    if (!Array.isArray(data)) {\n      return this.throwError(action, `should be an array of entities`);\n    }\n    data.forEach((entity, i) => {\n      const id = this.selectId(entity);\n      if (this.isNotKeyType(id)) {\n        const msg = `, item ${i + 1}, does not have a valid entity key (id)`;\n        this.throwError(action, msg);\n      }\n    });\n    return data;\n  }\n\n  /** Throw if the action payload is not a single, valid key */\n  mustBeKey(action: EntityAction<string | number>): string | number | never {\n    const data = this.extractData(action);\n    if (!data) {\n      throw new Error(`should be a single entity key`);\n    }\n    if (this.isNotKeyType(data)) {\n      throw new Error(`is not a valid key (id)`);\n    }\n    return data;\n  }\n\n  /** Throw if the action payload is not an array of valid keys */\n  mustBeKeys(action: EntityAction<(string | number)[]>): (string | number)[] {\n    const data = this.extractData(action);\n    if (!Array.isArray(data)) {\n      return this.throwError(action, `should be an array of entity keys (id)`);\n    }\n    data.forEach((id, i) => {\n      if (this.isNotKeyType(id)) {\n        const msg = `${this.entityName} ', item ${i +\n          1}, is not a valid entity key (id)`;\n        this.throwError(action, msg);\n      }\n    });\n    return data;\n  }\n\n  /** Throw if the action payload is not an update with a valid key (id) */\n  mustBeUpdate(action: EntityAction<Update<T>>): Update<T> {\n    const data = this.extractData(action);\n    if (!data) {\n      return this.throwError(action, `should be a single entity update`);\n    }\n    const { id, changes } = data;\n    const id2 = this.selectId(changes as T);\n    if (this.isNotKeyType(id) || this.isNotKeyType(id2)) {\n      this.throwError(action, `has a missing or invalid entity key (id)`);\n    }\n    return data;\n  }\n\n  /** Throw if the action payload is not an array of updates with valid keys (ids) */\n  mustBeUpdates(action: EntityAction<Update<T>[]>): Update<T>[] {\n    const data = this.extractData(action);\n    if (!Array.isArray(data)) {\n      return this.throwError(action, `should be an array of entity updates`);\n    }\n    data.forEach((item, i) => {\n      const { id, changes } = item;\n      const id2 = this.selectId(changes as T);\n      if (this.isNotKeyType(id) || this.isNotKeyType(id2)) {\n        this.throwError(\n          action,\n          `, item ${i + 1}, has a missing or invalid entity key (id)`\n        );\n      }\n    });\n    return data;\n  }\n\n  /** Throw if the action payload is not an update response with a valid key (id) */\n  mustBeUpdateResponse(\n    action: EntityAction<UpdateResponseData<T>>\n  ): UpdateResponseData<T> {\n    const data = this.extractData(action);\n    if (!data) {\n      return this.throwError(action, `should be a single entity update`);\n    }\n    const { id, changes } = data;\n    const id2 = this.selectId(changes as T);\n    if (this.isNotKeyType(id) || this.isNotKeyType(id2)) {\n      this.throwError(action, `has a missing or invalid entity key (id)`);\n    }\n    return data;\n  }\n\n  /** Throw if the action payload is not an array of update responses with valid keys (ids) */\n  mustBeUpdateResponses(\n    action: EntityAction<UpdateResponseData<T>[]>\n  ): UpdateResponseData<T>[] {\n    const data = this.extractData(action);\n    if (!Array.isArray(data)) {\n      return this.throwError(action, `should be an array of entity updates`);\n    }\n    data.forEach((item, i) => {\n      const { id, changes } = item;\n      const id2 = this.selectId(changes as T);\n      if (this.isNotKeyType(id) || this.isNotKeyType(id2)) {\n        this.throwError(\n          action,\n          `, item ${i + 1}, has a missing or invalid entity key (id)`\n        );\n      }\n    });\n    return data;\n  }\n\n  private extractData<T>(action: EntityAction<T>) {\n    return action.payload && action.payload.data;\n  }\n\n  /** Return true if this key (id) is invalid */\n  private isNotKeyType(id: any) {\n    return typeof id !== 'string' && typeof id !== 'number';\n  }\n\n  private throwError(action: EntityAction, msg: string): never {\n    throw new Error(\n      `${this.entityName} EntityAction guard for \"${\n        action.type\n      }\": payload ${msg}`\n    );\n  }\n}\n"]}